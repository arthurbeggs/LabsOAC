DEPTH = 2048;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN

00000000 : 23bdfff8;  % 65: exceptionHandling: addi $sp,$sp,-8 %
00000001 : afa10000;  % 66: 	sw $at,0($sp) %
00000002 : afbf0004;  % 67: 	sw $ra,4($sp) %
00000003 : 201a0020;  % 68: 	addi $k0, $zero, 32 # default syscall exception=8*4 %
00000004 : 401a6800;  % 69: 	mfc0 $k0, $13  #nao esta implementada no pipe %
00000005 : 00000000;  % 70: 	nop  #nao retirar! %
00000006 : 335a007c;  % 71: 	andi $k0, $k0, 0x007C %
00000007 : 001ad082;  % 72: 	srl $k0, $k0, 2 %
00000008 : 201b000c;  % 74: 	addi $k1, $zero, 12 # overflow na ULA %
00000009 : 137a0010;  % 75: 	beq $k1, $k0, ALUOverflowException %
0000000a : 201b000f;  % 77: 	addi $k1, $zero, 15 # excecao de ponto flutuante %
0000000b : 137a000f;  % 78: 	beq $k1, $k0, FPALUException %
0000000c : 201b0000;  % 80: 	addi $k1, $zero, 0 # interrupcao %
0000000d : 137a000e;  % 81: 	beq $k1, $k0, interruptException %
0000000e : 201b000a;  % 83: 	addi $k1, $zero, 10 # instrucao reservada ou invalida %
0000000f : 137a00ba;  % 84: 	beq $k1, $k0, instructionException %
00000010 : 201b0008;  % 86: 	addi $k1, $zero, 8 # syscall %
00000011 : 137a00ca;  % 87: 	beq $k1, $k0, syscallException %
00000012 : 8fbf0004;  % 89: endException:	lw $ra,4($sp) %
00000013 : 8fa10000;  % 90: 		lw $at,0($sp) %
00000014 : 23bd0008;  % 91: 		addi $sp,$sp,8 %
00000015 : 401a7000;  % 93: 		mfc0 $k0,$14    #### EPC + 4     #nao esta implementada no pipe %
00000016 : 235a0004;  % 94: 		addi $k0,$k0,4 %
00000017 : 409a7000;  % 95: 		mtc0 $k0,$14  #nao esta implementada no pipe %
00000018 : 42000018;  % 96: 		eret          #nao esta implementada no pipe %
00000019 : 03e00008;  % 97: 		jr $ra  #para o caso do eret nao estar implementado (pipeline) %
0000001a : 08000012;  % 99: ALUOverflowException: 	j endException %
0000001b : 08000012;  % 103: FPALUException: 	j endException %
0000001c : 401a6800;  % 107: interruptException: 	mfc0 $k0, $13 %
0000001d : 335aff00;  % 108: 	andi $k0, $k0, 0xFF00 %
0000001e : 001ad202;  % 109: 	srl $k0, $k0, 8 %
0000001f : 335b0001;  % 111: 	andi $k1, $k0, 0x0001 %
00000020 : 17600076;  % 112: 	bne $k1, $zero, keyboardInterrupt %
00000021 : 335b0002;  % 114: 	andi $k1, $k0, 0x0002 %
00000022 : 17600006;  % 115: 	bne $k1, $zero, audioInterrupt %
00000023 : 335b0004;  % 117: 	andi $k1, $k0, 0x0004 %
00000024 : 17600005;  % 118: 	bne $k1, $zero, mouseInterrupt	 %
00000025 : 335b0008;  % 120: 	andi $k1, $k0, 0x0008  #verificar se nao  seria 0x0008 %
00000026 : 17600001;  % 121: 	bne $k1, $zero, counterInterrupt %
00000027 : 08000012;  % 123: 	j endException %
00000028 : 08000012;  % 125: counterInterrupt: 	j endException %
00000029 : 08000012;  % 128: audioInterrupt: 	j endException %
0000002a : 3c01ffff;  % 132: mouseInterrupt:	la $k0,0xFFFF0114 #endereï¿½o do buffer_mouse %
0000002b : 343a0114;  % 132:  %
0000002c : 00000000;  % 133: 	nop %
0000002d : 00000000;  % 134: 	nop %
0000002e : 8f5a0000;  % 135: 	lw $k0,0($k0) #carrega o buffer em k0 %
0000002f : 00000000;  % 136: 	nop %
00000030 : 00000000;  % 137: 	nop %
00000031 : 335b00ff;  % 138: 	andi $k1,$k0,0xFF %
00000032 : 23bdfff8;  % 140: 	addi $sp,$sp,-8 %
00000033 : afa80000;  % 141: 	sw $t0,0($sp) %
00000034 : afa90004;  % 142: 	sw $t1,4($sp) %
00000035 : 3c0100ff;  % 147: 	li $k1,0x00ff0000 %
00000036 : 343b0000;  % 147:  %
00000037 : 00000000;  % 148: 	nop %
00000038 : 00000000;  % 149: 	nop %
00000039 : 035bd824;  % 150: 	and $k1,$k0,$k1 %
0000003a : 00000000;  % 151: 	nop %
0000003b : 00000000;  % 152: 	nop %
0000003c : 001bdc02;  % 153: 	srl $k1,$k1,16 %
0000003d : 33680001;  % 155: 	andi $t0,$k1,1 %
0000003e : 24090000;  % 157: 	li $t1,0 %
0000003f : 11000001;  % 158: 	beq $t0,$zero,MOUSEPULAESQ %
00000040 : 2409000f;  % 159: 	li $t1,0xF %
00000041 : 33680002;  % 161: 	MOUSEPULAESQ: andi $t0,$k1,2 %
00000042 : 00000000;  % 162: 	nop %
00000043 : 00000000;  % 163: 	nop %
00000044 : 00084042;  % 164: 	srl $t0,$t0,1 %
00000045 : 11000001;  % 166: 	beq $t0,$zero,MOUSEPULADIR %
00000046 : 352900f0;  % 167: 	ori $t1,$t1,0xF0 %
00000047 : 33680004;  % 169: 	MOUSEPULADIR: andi $t0,$k1,4 %
00000048 : 00084082;  % 170: 	srl $t0,$t0,2 %
00000049 : 11000003;  % 172: 	beq $t0,$zero,MOUSEPULAMEIO %
0000004a : 35290f00;  % 173: 	ori $t1,$t1,0xF00 %
0000004b : 00000000;  % 174: 	nop %
0000004c : 00000000;  % 175: 	nop %
0000004d : 3c019000;  % 176: 	MOUSEPULAMEIO: sw $t1,DATA_CLICKS($zero)    ########### ENDERECO ERRADO!!!!!!! %
0000004e : 00200821;  % 176:  %
0000004f : ac290788;  % 176:  %
00000050 : 33680010;  % 179: 	andi $t0,$k1,0x10 %
00000051 : 00000000;  % 180: 	nop %
00000052 : 00000000;  % 181: 	nop %
00000053 : 00084102;  % 182: 	srl $t0,$t0,4 #t0=(sinal) %
00000054 : 3409ff00;  % 183: 	la $t1,0x0000ff00 %
00000055 : 00000000;  % 184: 	nop %
00000056 : 00000000;  % 185: 	nop %
00000057 : 013a4824;  % 186: 	and $t1,$t1,$k0 %
00000058 : 00094a02;  % 187: 	srl $t1,$t1,8 %
00000059 : 11000004;  % 188: 	beq $t0,$zero,pulasinalmousex %
0000005a : 2408ff00;  % 189: 	la $t0,0xffffff00 %
0000005b : 00000000;  % 190: 	nop %
0000005c : 00000000;  % 191: 	nop %
0000005d : 01284825;  % 192: 	or $t1,$t1,$t0 %
0000005e : 3c019000;  % 194: 	pulasinalmousex: lw $t0,DATA_X($zero)    ################ ENDERECO ERRADO %
0000005f : 00200821;  % 194:  %
00000060 : 8c280780;  % 194:  %
00000061 : 00000000;  % 195: 	nop %
00000062 : 00000000;  % 196: 	nop %
00000063 : 01094020;  % 197: 	add $t0,$t0,$t1 %
00000064 : 24090140;  % 198: 	li $t1,320 %
00000065 : 00000000;  % 199: 	nop %
00000066 : 00000000;  % 200: 	nop %
00000067 : 0109482a;  % 201: 	slt $t1,$t0,$t1 %
00000068 : 15200001;  % 202: 	bne $t1,$zero,mouseliberax320 %
00000069 : 24080140;  % 203: 	li $t0,320 %
0000006a : 24090000;  % 205: 	mouseliberax320: li $t1,0 %
0000006b : 0109482a;  % 206: 	slt $t1,$t0,$t1 %
0000006c : 11200001;  % 207: 	beq $t1,$zero,mouseliberax0 %
0000006d : 24080000;  % 208: 	li $t0,0 %
0000006e : 3c019000;  % 210: 	mouseliberax0: sw $t0,DATA_X($zero)    ############END ERRADO %
0000006f : 00200821;  % 210:  %
00000070 : ac280780;  % 210:  %
00000071 : 33680020;  % 213: 	andi $t0,$k1,0x20 %
00000072 : 00000000;  % 214: 	nop %
00000073 : 00000000;  % 215: 	nop %
00000074 : 00084142;  % 216: 	srl $t0,$t0,5 #t0=(sinal) %
00000075 : 240900ff;  % 217: 	la $t1,0x000000ff %
00000076 : 013a4824;  % 218: 	and $t1,$t1,$k0 %
00000077 : 11000004;  % 219: 	beq $t0,$zero,pulasinalmousey %
00000078 : 2408ff00;  % 220: 	la $t0,0xffffff00 %
00000079 : 00000000;  % 221: 	nop %
0000007a : 00000000;  % 222: 	nop %
0000007b : 01284825;  % 223: 	or $t1,$t1,$t0 %
0000007c : 01294827;  % 226: 	pulasinalmousey: nor $t1,$t1,$t1 %
0000007d : 21290001;  % 227: 	addi $t1,$t1,1 #t1=delta y %
0000007e : 3c019000;  % 228: 	lw $t0,DATA_Y($zero)              ############# ENDERECO ERRADO %
0000007f : 00200821;  % 228:  %
00000080 : 8c280784;  % 228:  %
00000081 : 01094020;  % 229: 	add $t0,$t0,$t1 %
00000082 : 240900f0;  % 230: 	li $t1,240 %
00000083 : 00000000;  % 231: 	nop %
00000084 : 00000000;  % 232: 	nop %
00000085 : 0109482a;  % 233: 	slt $t1,$t0,$t1 %
00000086 : 15200001;  % 234: 	bne $t1,$zero,mouseliberay240 %
00000087 : 240800f0;  % 235: 	li $t0,240 %
00000088 : 24090000;  % 237: 	mouseliberay240: li $t1,0 %
00000089 : 00000000;  % 238: 	nop %
0000008a : 00000000;  % 239: 	nop %
0000008b : 0109482a;  % 240: 	slt $t1,$t0,$t1 %
0000008c : 11200001;  % 241: 	beq $t1,$zero,mouseliberay0 %
0000008d : 24080000;  % 242: 	li $t0,0 %
0000008e : 3c019000;  % 244: 	mouseliberay0: sw $t0,DATA_Y($zero)    ####################END ERRADO %
0000008f : 00200821;  % 244:  %
00000090 : ac280784;  % 244:  %
00000091 : 00000000;  % 245: 	nop %
00000092 : 00000000;  % 246: 	nop %
00000093 : 8fa80000;  % 247: 	lw $t0,0($sp) %
00000094 : 8fa90004;  % 248: 	lw $t1,4($sp) %
00000095 : 23bd0008;  % 249: 	addi $sp,$sp,8 %
00000096 : 08000012;  % 251: 	j endException %
00000097 : 23bdfff8;  % 255: keyboardInterrupt: addi $sp, $sp, -8 %
00000098 : afa40000;  % 256: 	sw $a0, 0($sp) %
00000099 : afa20004;  % 257: 	sw $v0, 4($sp) %
0000009a : 3c019000;  % 260: 	la $a0, eventQueueEndPtr %
0000009b : 3424077c;  % 260:  %
0000009c : 00000000;  % 261: 	nop %
0000009d : 00000000;  % 262: 	nop %
0000009e : 8c840000;  % 263: 	lw $a0, 0($a0) %
0000009f : 0c0000ba;  % 264: 	jal eventQueueIncrementPointer %
000000a0 : 3c019000;  % 265: 	la $k0, eventQueueBeginPtr %
000000a1 : 343a0778;  % 265:  %
000000a2 : 00000000;  % 266: 	nop %
000000a3 : 00000000;  % 267: 	nop %
000000a4 : 8f5a0000;  % 268: 	lw $k0, 0($k0) %
000000a5 : 00000000;  % 269: 	nop %
000000a6 : 00000000;  % 270: 	nop %
000000a7 : 1342000e;  % 271: 	beq $k0, $v0, keyboardInterruptEnd %
000000a8 : 3c01ffff;  % 274: 	la $k0, 0xFFFF0100 %
000000a9 : 343a0100;  % 274:  %
000000aa : 00000000;  % 275: 	nop %
000000ab : 00000000;  % 276: 	nop %
000000ac : 8f5a0000;  % 277: 	lw $k0, 0($k0) %
000000ad : 00000000;  % 278: 	nop %
000000ae : 00000000;  % 279: 	nop %
000000af : 001ac821;  % 280: 	move $t9, $k0 %
000000b0 : ac9a0000;  % 283: 	sw $k0, 0($a0) %
000000b1 : 3c019000;  % 284: 	la $k0, eventQueueEndPtr %
000000b2 : 343a077c;  % 284:  %
000000b3 : 00000000;  % 285: 	nop %
000000b4 : 00000000;  % 286: 	nop %
000000b5 : af420000;  % 287: 	sw $v0, 0($k0) %
000000b6 : 8fa40000;  % 289: 	keyboardInterruptEnd: lw $a0, 0($sp) %
000000b7 : 8fa20004;  % 290: 	lw $v0, 4($sp) %
000000b8 : 23bd0008;  % 291: 	addi $sp, $sp, 8 %
000000b9 : 08000012;  % 293: 	j endException	 %
000000ba : 20820004;  % 296: 	eventQueueIncrementPointer: addi $v0, $a0, 4 %
000000bb : 3c019000;  % 297: 	la $t0, eventQueueEndAddr %
000000bc : 34280774;  % 297:  %
000000bd : 00000000;  % 298: 	nop %
000000be : 00000000;  % 299: 	nop %
000000bf : 8d080000;  % 300: 	lw $t0, 0($t0) %
000000c0 : 00000000;  % 301: 	nop %
000000c1 : 00000000;  % 302: 	nop %
000000c2 : 11020001;  % 303: 	beq $t0, $v0, eventQueueIncrementPointerIf %
000000c3 : 03e00008;  % 304: 	jr $ra %
000000c4 : 3c019000;  % 306: 	eventQueueIncrementPointerIf: la $v0, eventQueueBeginAddr %
000000c5 : 34220770;  % 306:  %
000000c6 : 00000000;  % 307: 	nop %
000000c7 : 00000000;  % 308: 	nop %
000000c8 : 8c420000;  % 309: 	lw $v0, 0($v0) %
000000c9 : 03e00008;  % 310: 	jr $ra %
000000ca : 3c019000;  % 315: instructionException: la $t0, instructionMessage %
000000cb : 34280748;  % 315:  %
000000cc : 00000000;  % 316: 	nop %
000000cd : 00000000;  % 317: 	nop %
000000ce : 3c01ffff;  % 318: 	la $t9, 0xFFFF0130 %
000000cf : 34390130;  % 318:  %
000000d0 : 00000000;  % 319: 	nop %
000000d1 : 00000000;  % 320: 	nop %
000000d2 : af200020;  % 321: 	sw $zero, 0x20($t9) %
000000d3 : 81090000;  % 322: 	lb $t1,0($t0)   #primeiro caractere %
000000d4 : 00000000;  % 323: 	nop %
000000d5 : 00000000;  % 324: 	nop %
000000d6 : 11200067;  % 325: 	instructionExceptionLoop: beq $t1,$zero, goToExit   ## fim da string %
000000d7 : a3290000;  % 326: 	sb $t1,0($t9) %
000000d8 : 21080001;  % 327: 	addi $t0,$t0,1 %
000000d9 : 23390001;  % 328: 	addi $t9,$t9,1 %
000000da : 81090000;  % 329: 	lb $t1,0($t0)	 %
000000db : 080000d6;  % 330: 	j instructionExceptionLoop %
000000dc : 23bdffcc;  % 335: syscallException: addi $sp, $sp, -52   			# Salva HI, LO, $ra, e todos os $ts na pilha %
000000dd : afbf0000;  % 336: 	sw $ra, 0($sp) %
000000de : afa80004;  % 337: 	sw $t0, 4($sp) %
000000df : afa90008;  % 338: 	sw $t1, 8($sp) %
000000e0 : afaa000c;  % 339: 	sw $t2, 12($sp) %
000000e1 : afab0010;  % 340: 	sw $t3, 16($sp) %
000000e2 : afac0014;  % 341: 	sw $t4, 20($sp) %
000000e3 : afad0018;  % 342: 	sw $t5, 24($sp) %
000000e4 : afae001c;  % 343: 	sw $t6, 28($sp) %
000000e5 : afaf0020;  % 344: 	sw $t7, 32($sp) %
000000e6 : afb80024;  % 345: 	sw $t8, 36($sp) %
000000e7 : afb90028;  % 346: 	sw $t9, 40($sp) %
000000e8 : 0000c810;  % 350: 	mfhi $t9 %
000000e9 : afb9002c;  % 351: 	sw $t9, 44($sp) %
000000ea : 0000c812;  % 352: 	mflo $t9 %
000000eb : afb90030;  % 353: 	sw $t9, 48($sp) %
000000ec : 00004020;  % 358:     add $t0, $zero, $zero %
000000ed : 00004820;  % 359:     add $t1, $zero, $zero %
000000ee : 00005020;  % 360:     add $t2, $zero, $zero %
000000ef : 00005820;  % 361:     add $t3, $zero, $zero %
000000f0 : 00006020;  % 362:     add $t4, $zero, $zero %
000000f1 : 00006820;  % 363:     add $t5, $zero, $zero %
000000f2 : 00007020;  % 364:     add $t6, $zero, $zero %
000000f3 : 00007820;  % 365:     add $t7, $zero, $zero %
000000f4 : 0000c020;  % 366:     add $t8, $zero, $zero %
000000f5 : 0000c820;  % 367:     add $t9, $zero, $zero %
000000f6 : 2008000a;  % 370: 	addi $t0,$zero, 10 %
000000f7 : 11020046;  % 371: 	beq $t0,$v0,goToExit		# syscall exit %
000000f8 : 20080001;  % 373: 	addi $t0, $zero, 1				# sycall 1 = print int %
000000f9 : 11020045;  % 374: 	beq $t0, $v0, goToPrintInt %
000000fa : 20080065;  % 375: 	addi $t0, $zero, 101				# sycall 1 = print int %
000000fb : 11020043;  % 376: 	beq $t0, $v0, goToPrintInt %
000000fc : 20080004;  % 378: 	addi $t0, $zero, 4				# syscall 4 = print string %
000000fd : 11020043;  % 379: 	beq $t0, $v0, goToPrintString %
000000fe : 20080068;  % 380: 	addi $t0, $zero, 104				# syscall 4 = print string %
000000ff : 11020041;  % 381: 	beq $t0, $v0, goToPrintString %
00000100 : 2008000b;  % 383: 	addi $t0, $zero, 11				# syscall 11 = print char %
00000101 : 11020041;  % 384: 	beq $t0, $v0, goToPrintChar %
00000102 : 2008006f;  % 385: 	addi $t0, $zero, 111				# syscall 11 = print char %
00000103 : 1102003f;  % 386: 	beq $t0, $v0, goToPrintChar %
00000104 : 2008002d;  % 388: 	addi $t0,$zero,45				# syscall 45 = plot %
00000105 : 1102003f;  % 389: 	beq $t0,$v0, goToPlot %
00000106 : 2008002e;  % 391: 	addi $t0,$zero,46				# syscall 46 = getplot %
00000107 : 1102003f;  % 392: 	beq $t0,$v0, goToGetPlot %
00000108 : 2008000c;  % 394: 	addi $t0, $zero, 12				# syscall 12 = read char %
00000109 : 1102003f;  % 395: 	beq $t0, $v0, goToReadChar %
0000010a : 20080070;  % 396: 	addi $t0, $zero, 112				# syscall 12 = read char %
0000010b : 1102003d;  % 397: 	beq $t0, $v0, goToReadChar %
0000010c : 20080005;  % 399: 	addi $t0, $zero, 5				# syscall 5 = read int %
0000010d : 1102003d;  % 400: 	beq $t0, $v0, goToReadInt %
0000010e : 20080069;  % 401: 	addi $t0, $zero, 105				# syscall 5 = read int %
0000010f : 1102003b;  % 402: 	beq $t0, $v0, goToReadInt %
00000110 : 20080008;  % 404: 	addi $t0, $zero, 8				# syscall 8 = read string %
00000111 : 1102003b;  % 405: 	beq $t0, $v0, goToReadString %
00000112 : 2008006c;  % 406: 	addi $t0, $zero, 108				# syscall 8 = read string %
00000113 : 11020039;  % 407: 	beq $t0, $v0, goToReadString %
00000114 : 2008001f;  % 411: 	addi $t0, $zero, 31				# syscall 31 = MIDI out %
00000115 : 11020039;  % 412: 	beq $t0, $v0, goToMidiOut			# Generate tone and return immediately %
00000116 : 20080083;  % 413:     addi $t0, $zero, 131				# syscall 31 = MIDI out %
00000117 : 11020037;  % 414: 	beq $t0, $v0, goToMidiOut %
00000118 : 20080021;  % 419: 	addi $t0, $zero, 33				# syscall 33 = MIDI out synchronous %
00000119 : 11020037;  % 420: 	beq $t0, $v0, goToMidiOutSync			# Generate tone and return upon tone completion %
0000011a : 20080085;  % 421:     addi $t0, $zero, 133				# syscall 33 = MIDI out synchronous %
0000011b : 11020035;  % 422: 	beq $t0, $v0, goToMidiOutSync %
0000011c : 2008002f;  % 424: 	addi $t0, $zero, 47				# syscall 47 = inkey %
0000011d : 11020035;  % 425: 	beq $t0, $v0, goToInKey %
0000011e : 20080030;  % 427: 	addi $t0,$zero, 48				# syscall 48 = CLS		 %
0000011f : 11020035;  % 428: 	beq $t0, $v0, goToCLS %
00000120 : 20080096;  % 430: 	addi $t0,$zero, 150				# syscall 50 = pop event		 %
00000121 : 11020035;  % 431: 	beq $t0, $v0, goToPopEvent %
00000122 : 8fbf0000;  % 435: endSyscall: lw $ra, 0($sp) %
00000123 : 8fa80004;  % 436: 	lw $t0, 4($sp) %
00000124 : 8fa90008;  % 437: 	lw $t1, 8($sp) %
00000125 : 8faa000c;  % 438: 	lw $t2, 12($sp) %
00000126 : 8fab0010;  % 439: 	lw $t3, 16($sp) %
00000127 : 8fac0014;  % 440: 	lw $t4, 20($sp) %
00000128 : 8fad0018;  % 441: 	lw $t5, 24($sp) %
00000129 : 8fae001c;  % 442: 	lw $t6, 28($sp) %
0000012a : 8faf0020;  % 443: 	lw $t7, 32($sp) %
0000012b : 8fb80024;  % 444: 	lw $t8, 36($sp) %
0000012c : 8fb9002c;  % 448: 	lw $t9, 44($sp) %
0000012d : 03200011;  % 449: 	mthi $t9 %
0000012e : 8fb90030;  % 450: 	lw $t9, 48($sp) %
0000012f : 03200013;  % 451: 	mtlo $t9 %
00000130 : 8fb90028;  % 453: 	lw $t9, 40($sp) %
00000131 : 23bd0034;  % 454: 	addi $sp, $sp, 52	 %
00000132 : 08000012;  % 455: 	j endException %
00000133 : 3c01ffff;  % 458: goToExit1: la $t9, 0xFFFF0130  # escreve FIM no LCD  <= RETIREI mudar o goToExit1  %
00000134 : 34390130;  % 458:  %
00000135 : 00000000;  % 459: 	nop %
00000136 : 00000000;  % 460: 	nop %
00000137 : a3200020;  % 461: 	sb $zero, 0x20($t9)  #limpa %
00000138 : 24080046;  % 462: 	li $t0,0x46 %
00000139 : a3280007;  % 463: 	sb $t0,0x07($t9) %
0000013a : 24080049;  % 464: 	li $t0,0x49 %
0000013b : a3280008;  % 465: 	sb $t0,0x08($t9) %
0000013c : 2408004d;  % 466: 	li $t0,0x4D %
0000013d : a3280009;  % 467: 	sb $t0,0x09($t9) %
0000013e : 0800013e;  % 469: goToExit: j goToExit  ########### syscall 10 %
0000013f : 0c000159;  % 471: goToPrintInt: jal printInt			# chama printInt %
00000140 : 08000122;  % 472: 	j endSyscall %
00000141 : 0c000190;  % 474: goToPrintString: jal printString		# chama printString %
00000142 : 08000122;  % 475: 	j endSyscall			 %
00000143 : 0c0001a9;  % 477: goToPrintChar: jal printChar			#chama printChar %
00000144 : 08000122;  % 478: 	j endSyscall %
00000145 : 0c0001f8;  % 480: goToPlot: jal Plot %
00000146 : 08000122;  % 481: 	j endSyscall %
00000147 : 0c000205;  % 483: goToGetPlot: jal GetPlot %
00000148 : 08000122;  % 484: 	j endSyscall %
00000149 : 0c000212;  % 486: goToReadChar: jal readChar			#chama readChar %
0000014a : 08000122;  % 487: 	j endSyscall %
0000014b : 0c000274;  % 489: goToReadInt: jal readInt			#chama readInt %
0000014c : 08000122;  % 490: 	j endSyscall %
0000014d : 0c0002c7;  % 492: goToReadString: jal readString			#chama readString %
0000014e : 08000122;  % 493: 		j endSyscall %
0000014f : 0c000335;  % 497: goToMidiOut: jal midiOut				#chama MIDIout %
00000150 : 08000122;  % 498: 	j endSyscall %
00000151 : 0c00034a;  % 500: goToMidiOutSync: jal midiOutSync				#chama MIDIoutSync %
00000152 : 08000122;  % 501: 	j endSyscall %
00000153 : 0c000366;  % 503: goToInKey: jal inKey				#chama inKey %
00000154 : 08000122;  % 504: 	j endSyscall %
00000155 : 0c000398;  % 506: goToCLS: jal CLS				#chama CLS %
00000156 : 08000122;  % 507: 	j endSyscall %
00000157 : 0c0003a6;  % 509: goToPopEvent: jal popEvent			#chama popEvent %
00000158 : 08000122;  % 510: 	j endSyscall %
00000159 : 23bdfffc;  % 520: printInt: addi $sp, $sp, -4   				# salva $ra %
0000015a : afbf0000;  % 521: 	sw $ra, 0($sp) %
0000015b : 14800007;  % 524: 	bne $a0, $zero, printNotZero				# chama printNotZero %
0000015c : 20040030;  % 526: 	printZero: addi $a0, $zero, 48				# Imprime 0 %
0000015d : 0c0001a9;  % 527: 		jal printChar %
0000015e : 8fbf0000;  % 529: printIntEnd:	lw $ra, 0($sp)						#retorna %
0000015f : 23bd0004;  % 530: 		addi $sp, $sp, 4 %
00000160 : 00000000;  % 531: 		nop %
00000161 : 00000000;  % 532: 		nop %
00000162 : 03e00008;  % 533: 		jr $ra %
00000163 : 00044020;  % 535: printNotZero: add $t0, $zero, $a0			# $t0 contem o valor do inteiro a ser impresso %
00000164 : 2009000a;  % 536: 		addi $t1, $zero, 10					# $t1 eh uma constante 10 %
00000165 : 0100c82a;  % 537: 		slt $t9, $t0, $zero					# $t0 < 0 ? %
00000166 : 1320000d;  % 538: 		beq $t9, $zero, PrintIntContinue	# verifica se o valor eh negativo.  %
00000167 : 2004002d;  % 540: 		addi $a0, $zero, 45					# Negativo, imprime um '-' na tela %
00000168 : 23bdfff4;  % 542: 		addi $sp, $sp, -12 %
00000169 : afbf0008;  % 543: 		sw $ra, 8($sp) %
0000016a : afa90004;  % 544: 		sw $t1, 4($sp) %
0000016b : afa80000;  % 545: 		sw $t0, 0($sp)						# salva regs %
0000016c : 0c0001a9;  % 547: 		jal printChar						# imprime ASCII 45 %
0000016d : 8fbf0008;  % 549: 		lw $ra, 8($sp)						# recupera regs %
0000016e : 8fa90004;  % 550: 		lw $t1, 4($sp) %
0000016f : 8fa80000;  % 551: 		lw $t0, 0($sp) %
00000170 : 23bd000c;  % 552: 		addi $sp, $sp, 12 %
00000171 : 00084022;  % 554: 		sub $t0, $zero, $t0					# Torna $t0 positivo %
00000172 : 20a50008;  % 555: 		addi $a1, $a1, 8					# incrementa a coluna %
00000173 : 00005820;  % 556: 		add $t3, $zero, $zero				# $t3=0 %
00000174 : 1100000b;  % 558: PrintIntContinue: beq $t0, $zero, PrintIntPop		# se $t0 ï¿½ zero, nao hï¿½ mais digitos para imprimir %
00000175 : 0109001a;  % 560: 		div $t0, $t1					# divide o valor por 10 %
00000176 : 00000000;  % 561: 		nop %
00000177 : 00000000;  % 562: 		nop %
00000178 : 00004012;  % 563: 		mflo $t0						# $t0 contem o valor dividido por 10 %
00000179 : 00005010;  % 564: 		mfhi $t2						# $t2 contem o ultimo digito a ser impresso %
0000017a : 00000000;  % 565: 		nop %
0000017b : 00000000;  % 566: 		nop %
0000017c : 23bdfffc;  % 567: 		addi $sp, $sp, -4 %
0000017d : afaa0000;  % 568: 		sw $t2, 0($sp)					# empilha $t2 %
0000017e : 216b0001;  % 570: 		addi $t3, $t3, 1				# conta quantos elementos (digitos) estï¿½o na pilha %
0000017f : 08000174;  % 571: 		j PrintIntContinue				# volta para ser dividido e empilhado de novo %
00000180 : 1160ffdd;  % 573: PrintIntPop: beq $t3, $zero, printIntEnd	# ultimo digito endPrintInt %
00000181 : 8fa40000;  % 575: 		lw $a0, 0($sp)					# le valor da pilha e coloca em $a0 %
00000182 : 23bd0004;  % 576: 		addi $sp, $sp, 4 %
00000183 : 00000000;  % 577: 		nop			#hazard lw addi %
00000184 : 20840030;  % 578: 		addi $a0, $a0, 48				# cï¿½digo ASCII do dï¿½gito = numero + 48 %
00000185 : 00000000;  % 579: 		nop %
00000186 : 23bdfff8;  % 580: 		addi $sp, $sp, -8				# salva regs %
00000187 : afab0000;  % 581: 		sw $t3, 0($sp) %
00000188 : afbf0004;  % 582: 		sw $ra, 4($sp) %
00000189 : 0c0001a9;  % 584: 		jal printChar					# imprime digito %
0000018a : 8fbf0004;  % 586: 		lw $ra, 4($sp)					# recupera regs %
0000018b : 8fab0000;  % 587: 		lw $t3, 0($sp) %
0000018c : 23bd0008;  % 588: 		addi $sp, $sp, 8 %
0000018d : 20a50008;  % 590: 		addi $a1, $a1, 8				# incrementa a coluna %
0000018e : 216bffff;  % 591: 		addi $t3, $t3, -1				# decrementa contador %
0000018f : 08000180;  % 592: 		j PrintIntPop					# volta %
00000190 : 23bdfffc;  % 607: printString:	addi $sp, $sp, -4			# salva $ra %
00000191 : afbf0000;  % 608: 		sw $ra, 0($sp) %
00000192 : 00044021;  % 610: 		move $t0, $a0					# $t0=endereco da string %
00000193 : 81040000;  % 612: ForPrintString:	lb $a0, 0($t0)			# le em $a0 o caracter a ser impresso %
00000194 : 10800010;  % 619: 		beq $a0, $zero, EndForPrintString	# string ASCIIZ termina com NULL %
00000195 : 23bdfffc;  % 621: 		addi $sp, $sp, -4				# salva $t0 %
00000196 : afa80000;  % 622: 		sw $t0, 0($sp) %
00000197 : 0c0001a9;  % 626: 		jal printChar					# imprime char %
00000198 : 8fa80000;  % 629: 		lw $t0, 0($sp)					# recupera $t0				 %
00000199 : 23bd0004;  % 630: 		addi $sp, $sp, 4 %
0000019a : 20a50008;  % 633: 		addi $a1, $a1, 8				# incrementa a coluna %
0000019b : 00000000;  % 634: 		nop %
0000019c : 00000000;  % 635: 		nop %
0000019d : 28bb0139;  % 636: 		slti $k1,$a1,313   #320-8 %
0000019e : 00000000;  % 637: 		nop %
0000019f : 00000000;  % 638: 		nop %
000001a0 : 17600002;  % 639: 		bne $k1,$zero,NaoPulaLinha %
000001a1 : 20c60008;  % 640: 		addi $a2,$a2,8					#incrementa a linha %
000001a2 : 00002821;  % 641: 		move $a1,$zero %
000001a3 : 21080001;  % 648: 		addi $t0,$t0,1 %
000001a4 : 08000193;  % 649: 		j ForPrintString				# loop %
000001a5 : 8fbf0000;  % 651: EndForPrintString: lw $ra, 0($sp)		# recupera $ra %
000001a6 : 23bd0004;  % 652: 		addi $sp, $sp, 4 %
000001a7 : 00000000;  % 653: 		nop %
000001a8 : 03e00008;  % 654: 		jr $ra							# fim printString %
000001a9 : 30edff00;  % 678: printChar:	andi $t5,$a3,0xFF00				# cor fundo %
000001aa : 30ee00ff;  % 679: 		andi $t6,$a3,0x00FF				# cor frente %
000001ab : 000d6a02;  % 680: 		srl $t5,$t5,8 %
000001ac : 288c0020;  % 682: 		slti $t4,$a0,32 %
000001ad : 15800003;  % 683: 		bne $t4,$zero, NAOIMPRIMIVEL %
000001ae : 288c007e;  % 684: 		slti $t4,$a0,126 %
000001af : 11800001;  % 685: 		beq $t4,$zero, NAOIMPRIMIVEL %
000001b0 : 080001b2;  % 686: 		j IMPRIMIVEL %
000001b1 : 24040020;  % 687: NAOIMPRIMIVEL:	li $a0,32 %
000001b2 : 24010140;  % 691: IMPRIMIVEL:	li $at, 320 %
000001b3 : 00260018;  % 692: 		mult $at, $a2 %
000001b4 : 00000000;  % 693: 		nop %
000001b5 : 00000000;  % 694: 		nop %
000001b6 : 00006012;  % 695: 		mflo $t4 %
000001b7 : 00000000;  % 696: 		nop %
000001b8 : 00000000;  % 697: 		nop %
000001b9 : 01856020;  % 698: 		add $t4, $t4, $a1				# t4 = 256(y) + x %
000001ba : 00000000;  % 699: 		nop %
000001bb : 00000000;  % 700: 		nop %
000001bc : 218c0007;  % 701: 		addi $t4, $t4, 7				# t4 = 256(y) + (x+7) %
000001bd : 3c01ff00;  % 702: 		la $t8, 0xFF000000		# Endereco de inicio da memoria VGA %
000001be : 34380000;  % 702:  %
000001bf : 00000000;  % 703: 		nop %
000001c0 : 00000000;  % 704: 		nop %
000001c1 : 01986020;  % 705: 		add $t4, $t4, $t8				# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
000001c2 : 208affe0;  % 707: 		addi $t2, $a0, -32				# indice do char na memoria %
000001c3 : 00000000;  % 708: 		nop %
000001c4 : 00000000;  % 709: 		nop %
000001c5 : 000a50c0;  % 710: 		sll $t2, $t2, 3					# offset em bytes em relacao ao endereco inicial %
000001c6 : 3c019000;  % 712: 		la $t3,kdata %
000001c7 : 342b0000;  % 712:  %
000001c8 : 00000000;  % 713: 		nop %
000001c9 : 00000000;  % 714: 		nop %
000001ca : 014b5020;  % 715: 		add $t2,$t2,$t3   #pseudo .kdata		 %
000001cb : 00000000;  % 717: 		nop %
000001cc : 00000000;  % 718: 		nop %
000001cd : 8d4b0000;  % 719: 		lw $t3, 0($t2)					# carrega a primeira word do char %
000001ce : 20080004;  % 720: 		addi $t0, $zero, 4				# i = 4 %
000001cf : 00000000;  % 721: 		nop %
000001d0 : 00000000;  % 722: 		nop %
000001d1 : 11000010;  % 723: forChar1I: beq $t0, $zero, endForChar1I	# if(i == 0) end for i %
000001d2 : 20090008;  % 724: 		addi $t1, $zero, 8				# j = 8 %
000001d3 : 00000000;  % 725: 		nop %
000001d4 : 00000000;  % 726: 		nop %
000001d5 : 11200009;  % 728:      forChar1J: beq $t1, $zero, endForChar1J	# if(j == 0) end for j %
000001d6 : 31790001;  % 731: 		andi $t9,$t3,0x0001 %
000001d7 : 000b5842;  % 732: 		srl $t3, $t3, 1				# t3 = t3/2  ??????????????????? %
000001d8 : 13200002;  % 734: 		beq $t9, $zero, printCharPixelbg1 %
000001d9 : a18e0000;  % 735: 		sb $t6, 0($t4)		#imprime pixel com cor de frente %
000001da : 080001dc;  % 736: 		j endCharPixel1	 %
000001db : a18d0000;  % 737: printCharPixelbg1:	sb $t5, 0($t4)  #imprime pixel com cor de fundo %
000001dc : 2129ffff;  % 738: endCharPixel1:  addi $t1, $t1, -1				# j-- %
000001dd : 218cffff;  % 739: 		addi $t4, $t4, -1				# t4 aponta um pixel para a esquerda %
000001de : 080001d5;  % 740: 		j forChar1J %
000001df : 2108ffff;  % 742: endForChar1J:  addi $t0, $t0, -1				# i-- %
000001e0 : 218c0148;  % 744: 		addi $t4,$t4,328   # 2**12 + 8 %
000001e1 : 080001d1;  % 745: 		j forChar1I %
000001e2 : 8d4b0004;  % 747: endForChar1I: lw $t3, 4($t2)					# carrega a segunda word do char %
000001e3 : 20080004;  % 749: 		addi $t0, $zero, 4				# i = 4 %
000001e4 : 00000000;  % 750: 		nop %
000001e5 : 00000000;  % 751: 		nop %
000001e6 : 11000010;  % 752: forChar2I:	 beq $t0, $zero, endForChar2I	# if(i == 0) end for i %
000001e7 : 20090008;  % 753: 		addi $t1, $zero, 8				# j = 8 %
000001e8 : 00000000;  % 754: 		nop %
000001e9 : 00000000;  % 755: 		nop %
000001ea : 11200009;  % 756: 	forChar2J: beq $t1, $zero, endForChar2J	# if(j == 0) end for j %
000001eb : 31790001;  % 759: 			andi $t9,$t3,0x0001 %
000001ec : 000b5842;  % 760: 			srl $t3, $t3, 1					# t3 = t3/2 %
000001ed : 13200002;  % 762: 			beq $t9, $zero, printCharPixelbg2 %
000001ee : a18e0000;  % 763: 			sb $t6, 0($t4) %
000001ef : 080001f1;  % 764: 			j endCharPixel2 %
000001f0 : a18d0000;  % 766: printCharPixelbg2: sb $t5, 0($t4) %
000001f1 : 2129ffff;  % 768:  endCharPixel2:	addi $t1, $t1, -1				# j-- %
000001f2 : 218cffff;  % 769: 		addi $t4, $t4, -1				# t4 aponta um pixel para a esquerda %
000001f3 : 080001ea;  % 770: 		j forChar2J %
000001f4 : 2108ffff;  % 772: 	endForChar2J:	addi $t0, $t0, -1				# i-- %
000001f5 : 218c0148;  % 774: 			addi $t4,$t4,328 %
000001f6 : 080001e6;  % 775: 		j forChar2I %
000001f7 : 03e00008;  % 777: endForChar2I: jr $ra %
000001f8 : 24010140;  % 789: Plot: li $at,320   %
000001f9 : 00a10018;  % 790: 	mult $a1,$at %
000001fa : 00000000;  % 791: 	nop %
000001fb : 00000000;  % 792: 	nop %
000001fc : 00002812;  % 793: 	mflo $a1 %
000001fd : 00852020;  % 794: 	add $a0,$a0,$a1 %
000001fe : 3c01ff00;  % 795: 	la $a1, 0xFF000000   #endereco VGA %
000001ff : 34250000;  % 795:  %
00000200 : 00000000;  % 796: 	nop %
00000201 : 00000000;  % 797: 	nop %
00000202 : 00852025;  % 798: 	or $a0,$a0,$a1 %
00000203 : a0860000;  % 799: 	sb $a2,0($a0) %
00000204 : 03e00008;  % 800: 	jr $ra %
00000205 : 24010140;  % 811: GetPlot:li $at,320 %
00000206 : 00a10018;  % 812: 	mult $a1,$at %
00000207 : 00000000;  % 813: 	nop %
00000208 : 00000000;  % 814: 	nop %
00000209 : 00002812;  % 815: 	mflo $a1 %
0000020a : 00852020;  % 816: 	add $a0,$a0,$a1 %
0000020b : 3c01ff00;  % 817: 	la $a1, 0xFF000000  #endereco VGA %
0000020c : 34250000;  % 817:  %
0000020d : 00000000;  % 818: 	nop %
0000020e : 00000000;  % 819: 	nop %
0000020f : 00852025;  % 820: 	or $a0,$a0,$a1 %
00000210 : 80860000;  % 821: 	lb $a2,0($a0) %
00000211 : 03e00008;  % 822: 	jr $ra %
00000212 : 3c01ffff;  % 834: readChar: la $t0,0xFFFF0100 %
00000213 : 34280100;  % 834:  %
00000214 : 00000000;  % 835: 	nop %
00000215 : 00000000;  % 836: 	nop %
00000216 : 3c01ffff;  % 839: 	la $t1,0xFFFF0104 %
00000217 : 34290104;  % 839:  %
00000218 : 00000000;  % 840: 	nop %
00000219 : 00000000;  % 841: 	nop %
0000021a : 200f0012;  % 844: 	addi $t7, $zero, 0x12 #carrega o shift %
0000021b : 00000000;  % 845: 	nop %
0000021c : 00000000;  % 846: 	nop %
0000021d : 201800f0;  % 847: 	addi $t8, $zero, 0xF0 #carrega o F0 %
0000021e : 00000000;  % 848: 	nop %
0000021f : 00000000;  % 849: 	nop %
00000220 : 0000c820;  % 850: 	add $t9, $zero, $zero #shif precionado %
00000221 : 8d0e0000;  % 852: 	lw $t6, 0($t0) %
00000222 : 8d0a0000;  % 853: loopReadChar: lw $t2, 0($t0) %
00000223 : 00000000;  % 854: 	nop %
00000224 : 00000000;  % 855: 	nop %
00000225 : 114e0004;  % 856: 	beq $t2, $t6, atualizaBufferChar # testa se o buffer foi modificado %
00000226 : 00000000;  % 857: 	nop %
00000227 : 00000000;  % 858: 	nop %
00000228 : 00000000;  % 859: 	nop %
00000229 : 0800022f;  % 860: 	j modificado %
0000022a : 01407020;  % 862: atualizaBufferChar: add $t6, $t2, $zero %
0000022b : 00000000;  % 863: 	nop %
0000022c : 00000000;  % 864: 	nop %
0000022d : 00000000;  % 865: 	nop %
0000022e : 08000222;  % 866: 	j loopReadChar %
0000022f : 314c00ff;  % 868: modificado: andi $t4, $t2, 0xFF %
00000230 : 00000000;  % 869: 	nop %
00000231 : 00000000;  % 870: 	nop %
00000232 : 200d0012;  % 871: 	addi $t5, $zero, 0x12 %
00000233 : 00000000;  % 872: 	nop %
00000234 : 00000000;  % 873: 	nop %
00000235 : 118d003a;  % 874: 	beq $t4, $t5, shiftindahouse %
00000236 : 314c00ff;  % 877: 	andi $t4, $t2, 0xFF %
00000237 : 00000000;  % 878: 	nop %
00000238 : 00000000;  % 879: 	nop %
00000239 : 1198fff0;  % 880: 	beq $t4, $t8, atualizaBufferChar %
0000023a : 314cff00;  % 883: 	andi $t4, $t2, 0xFF00 %
0000023b : 00000000;  % 884: 	nop %
0000023c : 00000000;  % 885: 	nop %
0000023d : 3c010000;  % 886: 	addi $t5, $zero, 0xF000 %
0000023e : 3421f000;  % 886:  %
0000023f : 00016820;  % 886:  %
00000240 : 00000000;  % 887: 	nop %
00000241 : 00000000;  % 888: 	nop %
00000242 : 118d0002;  % 889: 	beq $t4, $t5, continua	#tecla foi solta %
00000243 : 01407020;  % 890: 	add $t6, $t2, $zero %
00000244 : 08000222;  % 891: 	j loopReadChar %
00000245 : 314c00ff;  % 894: continua: andi $t4, $t2, 0xFF #ultima tecla inserida %
00000246 : 00000000;  % 895: 	nop %
00000247 : 00000000;  % 896: 	nop %
00000248 : 118f0027;  % 897: 	beq $t4, $t7, shiftindahouse #se valor ï¿½ shift %
00000249 : 200d0001;  % 899: 	addi $t5, $zero, 1 %
0000024a : 00000000;  % 900: 	nop %
0000024b : 00000000;  % 901: 	nop %
0000024c : 132d0010;  % 902: 	beq $t9, $t5, enderecoShift %
0000024d : 000c6080;  % 904: 	sll $t4, $t4, 2 #mult 4 %
0000024e : 3c019000;  % 905: 	la $t5,inicioKdata %
0000024f : 342d0000;  % 905:  %
00000250 : 00000000;  % 906: 	nop %
00000251 : 00000000;  % 907: 	nop %
00000252 : 018d6020;  % 908: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
00000253 : 00000000;  % 909: 	nop %
00000254 : 00000000;  % 910: 	nop %
00000255 : 218c0318;  % 911: 	addi $t4, $t4, 0x318 #final da string para o printChar sem shit %
00000256 : 00000000;  % 912: 	nop %
00000257 : 00000000;  % 913: 	nop %
00000258 : 8d8d0000;  % 914: 	lw $t5, 0($t4) %
00000259 : 00000000;  % 915: 	nop %
0000025a : 00000000;  % 916: 	nop %
0000025b : 11a0ffce;  % 917: 	beq $t5, $zero, atualizaBufferChar %
0000025c : 08000272;  % 919: 	j ReadCharEnd %
0000025d : 314c00ff;  % 921: enderecoShift: andi $t4, $t2, 0xFF #ultima tecla inserida %
0000025e : 000c6080;  % 923: 	sll $t4, $t4, 2 #mult 4 %
0000025f : 00000000;  % 924: 	nop %
00000260 : 00000000;  % 925: 	nop %
00000261 : 3c019000;  % 926: 	la $t5,inicioKdata %
00000262 : 342d0000;  % 926:  %
00000263 : 00000000;  % 927: 	nop %
00000264 : 00000000;  % 928: 	nop %
00000265 : 018d6020;  % 929: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
00000266 : 00000000;  % 930: 	nop %
00000267 : 00000000;  % 931: 	nop %
00000268 : 218c0530;  % 932: 	addi $t4, $t4, 0x530 #final da string para o printChar com shift %
00000269 : 00000000;  % 933: 	nop %
0000026a : 00000000;  % 934: 	nop %
0000026b : 8d8d0000;  % 935: 	lw $t5, 0($t4) %
0000026c : 00000000;  % 936: 	nop %
0000026d : 00000000;  % 937: 	nop %
0000026e : 11a0ffbb;  % 938: 	beq $t5, $zero, atualizaBufferChar %
0000026f : 08000272;  % 940: 	j ReadCharEnd %
00000270 : 20190001;  % 942: shiftindahouse: addi, $t9, $zero, 1 %
00000271 : 0800022a;  % 943: 	j atualizaBufferChar %
00000272 : 000d1020;  % 945: ReadCharEnd: add $v0, $zero, $t5 #coloca em v0 o valor em ascii da tecla %
00000273 : 03e00008;  % 946: 	jr $ra %
00000274 : 20020000;  % 955: readInt: addi $v0, $zero, 0 %
00000275 : 200f0000;  % 956: 	addi $t7, $zero, 0 %
00000276 : 3c01ffff;  % 960: 	la $t0, 0xFFFF0100 %
00000277 : 34280100;  % 960:  %
00000278 : 00000000;  % 961: 	nop %
00000279 : 00000000;  % 962: 	nop %
0000027a : 3c01ffff;  % 965: 	la $t1, 0xFFFF0104 %
0000027b : 34290104;  % 965:  %
0000027c : 00000000;  % 966: 	nop %
0000027d : 00000000;  % 967: 	nop %
0000027e : 8d180000;  % 970: 	lw $t8, 0($t0)	#buffer inicial %
0000027f : 8d190000;  % 971: 	lw $t9, 0 ($t0)	#buffer inicial %
00000280 : 8d0a0000;  % 973: loopReadInt: lw $t2, 0($t0) %
00000281 : 00000000;  % 974: 	nop %
00000282 : 00000000;  % 975: 	nop %
00000283 : 1158003b;  % 976: 	beq $t2, $t8, atualizaBuffer %
00000284 : 8d2b0000;  % 977: 	lw $t3, 0($t1) %
00000285 : 314cff00;  % 981: 	andi $t4, $t2, 0xFF00 %
00000286 : 3c010000;  % 982: 	addi $t5, $zero, 0xF000 %
00000287 : 3421f000;  % 982:  %
00000288 : 00016820;  % 982:  %
00000289 : 00000000;  % 983: 	nop %
0000028a : 00000000;  % 984: 	nop %
0000028b : 118d0001;  % 985: 	beq $t4, $t5, continuaInt %
0000028c : 080002bf;  % 986: 	j atualizaBuffer %
0000028d : 314c00ff;  % 988: continuaInt: andi $t4, $t2, 0x000000FF %
0000028e : 200d00f0;  % 991: 	addi $t5, $zero, 0xF0 %
0000028f : 00000000;  % 992: 	nop %
00000290 : 00000000;  % 993: 	nop %
00000291 : 118d002d;  % 994: 	beq $t4, $t5, atualizaBuffer %
00000292 : 200d005a;  % 997: 	addi $t5, $zero, 0x5a %
00000293 : 00000000;  % 998: 	nop %
00000294 : 00000000;  % 999: 	nop %
00000295 : 118d002c;  % 1000: 	beq $t4, $t5, fimReadInt1 #pressionado o enter %
00000296 : 000c6080;  % 1003: 	sll $t4, $t4, 2 #mult 4 %
00000297 : 3c019000;  % 1004: 	la $t5,inicioKdata %
00000298 : 342d0000;  % 1004:  %
00000299 : 00000000;  % 1005: 	nop %
0000029a : 00000000;  % 1006: 	nop %
0000029b : 018d6020;  % 1007: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
0000029c : 218c0318;  % 1008: 	addi $t4, $t4, 0x318 #final da string para o printChar %
0000029d : 00000000;  % 1009: 	nop %
0000029e : 00000000;  % 1010: 	nop %
0000029f : 8d8d0000;  % 1011: 	lw $t5, 0($t4) #posicao na memoria %
000002a0 : 200e002f;  % 1014: 	addi $t6, $zero, 0x2f #inicio dos inteiros - 1 %
000002a1 : 00000000;  % 1015: 	nop %
000002a2 : 00000000;  % 1016: 	nop %
000002a3 : 01cd602a;  % 1017: 	slt $t4, $t6, $t5 %
000002a4 : 1180000f;  % 1018: 	beq $t4, $zero, naoInteiro %
000002a5 : 21ce000b;  % 1019: 	addi $t6, $t6, 0xB #final dos inteiros %
000002a6 : 00000000;  % 1020: 	nop %
000002a7 : 00000000;  % 1021: 	nop %
000002a8 : 01ae602a;  % 1022: 	slt $t4, $t5, $t6 %
000002a9 : 1180000a;  % 1023: 	beq $t4, $zero, naoInteiro %
000002aa : 31ad000f;  % 1026: 	andi $t5, $t5, 0xF #0x31 = 1, so depende dos bits finais %
000002ab : 200c000a;  % 1027: 	addi $t4, $zero, 10 %
000002ac : 00000000;  % 1028: 	nop %
000002ad : 00000000;  % 1029: 	nop  %
000002ae : 004c0018;  % 1030: 	mult $v0, $t4 #numero vezes 10 (unidade, dezena, centena...) %
000002af : 00000000;  % 1031: 	nop %
000002b0 : 00000000;  % 1032: 	nop %
000002b1 : 00001012;  % 1033: 	mflo $v0 %
000002b2 : 004d1020;  % 1034: 	add $v0, $v0, $t5 %
000002b3 : 080002bf;  % 1036: 	j atualizaBuffer %
000002b4 : 200c002d;  % 1038: naoInteiro: addi $t4, $zero, 0x2D %
000002b5 : 00000000;  % 1039: 	nop %
000002b6 : 00000000;  % 1040: 	nop %
000002b7 : 118d0001;  % 1041: 	beq $t4, $t5, negativo %
000002b8 : 080002bf;  % 1043: 	j atualizaBuffer %
000002b9 : 0002782a;  % 1045: negativo: slt $t7, $zero, $v0 %
000002ba : 200e0001;  % 1046: 	addi $t6, $zero, 1 %
000002bb : 00000000;  % 1047: 	nop %
000002bc : 00000000;  % 1048: 	nop %
000002bd : 11ee0001;  % 1049: 	beq $t7, $t6, atualizaBuffer %
000002be : 200f0001;  % 1050: 	addi $t7, $zero, 1 #1 para negativo %
000002bf : 000ac020;  % 1052: atualizaBuffer: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
000002c0 : 000bc820;  % 1053: 	add $t9, $zero, $t3	#copia o buffer atual para variavel de buffer anterior %
000002c1 : 08000280;  % 1055: 	j loopReadInt %
000002c2 : 11e00001;  % 1057: fimReadInt1: beq $t7, $zero, fimReadInt2 %
000002c3 : 00021022;  % 1058: 	sub $v0, $zero, $v0 %
000002c4 : 000ac020;  % 1060: fimReadInt2: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
000002c5 : 000bc820;  % 1061: 	add $t9, $zero, $t3	#copia o buffer atual para variavel de buffer anterior %
000002c6 : 03e00008;  % 1063: 	jr $ra #fim readInt %
000002c7 : 00047020;  % 1072: readString: add $t6, $zero, $a0 	#end inicial string %
000002c8 : 20010001;  % 1073: 	sub $t7, $a1, 1 	#tamanho maximo menos 1 (guarda para 0x00) %
000002c9 : 00a17822;  % 1073:  %
000002ca : 000f7880;  % 1074: 	sll $t7, $t7, 2		#tamanho maximo multiplicado por 4 %
000002cb : 00004820;  % 1075: 	add $t1, $zero, $zero	#contador de caracteres (de 4 em 4) %
000002cc : 0000d021;  % 1076: 	move $k0,$zero	#contador de 4 %
000002cd : 24020000;  % 1077: 	li $v0,0  #flag de ultimo zero %
000002ce : 3c01ffff;  % 1080: 	la $t0,0xFFFF0100 %
000002cf : 34280100;  % 1080:  %
000002d0 : 00000000;  % 1081: 	nop %
000002d1 : 00000000;  % 1082: 	nop %
000002d2 : 8d180000;  % 1084: 	lw $t8, 0($t0)		#buffer1 inicial %
000002d3 : 11e9005e;  % 1086: loopReadString: beq $t7, $t1, fimReadString %
000002d4 : 8d0a0000;  % 1088: 	lw $t2, 0($t0) %
000002d5 : 00000000;  % 1089: 	nop %
000002d6 : 00000000;  % 1090: 	nop %
000002d7 : 00000000;  % 1091: 	nop %
000002d8 : 11580056;  % 1092: 	beq $t2, $t8, atualizaBufferString %
000002d9 : 314cff00;  % 1095: 	andi $t4, $t2, 0xFF00 %
000002da : 3c010000;  % 1096: 	addi $t5, $zero, 0xF000 %
000002db : 3421f000;  % 1096:  %
000002dc : 00016820;  % 1096:  %
000002dd : 00000000;  % 1097: 	nop %
000002de : 00000000;  % 1098: 	nop %
000002df : 118d0001;  % 1099: 	beq $t4, $t5, continuaString %
000002e0 : 0800032f;  % 1100: 	j atualizaBufferString %
000002e1 : 314c00ff;  % 1102: continuaString: andi $t4, $t2, 0x00FF %
000002e2 : 200d00f0;  % 1105: 	addi $t5, $zero, 0xF0 %
000002e3 : 00000000;  % 1106: 	nop %
000002e4 : 00000000;  % 1107: 	nop %
000002e5 : 00000000;  % 1108: 	nop %
000002e6 : 118d0048;  % 1109: 	beq $t4, $t5, atualizaBufferString %
000002e7 : 200d005a;  % 1112: 	addi $t5, $zero, 0x5a %
000002e8 : 00000000;  % 1113: 	nop %
000002e9 : 00000000;  % 1114: 	nop %
000002ea : 00000000;  % 1115: 	nop %
000002eb : 118d0046;  % 1116: 	beq $t4, $t5, fimReadString #pressionado o enter %
000002ec : 000c6080;  % 1119: 	sll $t4, $t4, 2 	#mult 4 %
000002ed : 3c019000;  % 1121: 	la $t5,inicioKdata %
000002ee : 342d0000;  % 1121:  %
000002ef : 00000000;  % 1122: 	nop %
000002f0 : 00000000;  % 1123: 	nop %
000002f1 : 018d6020;  % 1124: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
000002f2 : 00000000;  % 1125: 	nop %
000002f3 : 00000000;  % 1126: 	nop %
000002f4 : 218c0318;  % 1127: 	addi $t4, $t4, 0x318 	#final da string para o printChar %
000002f5 : 00000000;  % 1128: 	nop %
000002f6 : 00000000;  % 1129: 	nop %
000002f7 : 00000000;  % 1130: 	nop %
000002f8 : 8d8d0000;  % 1131: 	lw $t5, 0($t4) 		#posicao na memoria %
000002f9 : 00000000;  % 1132: 	nop %
000002fa : 00000000;  % 1133: 	nop %
000002fb : 00000000;  % 1134: 	nop %
000002fc : 11a00032;  % 1135: 	beq $t5, $zero, atualizaBufferString %
000002fd : 01c96020;  % 1137: VoltaZeroString: add $t4, $t6, $t1 	#endereco para escrita %
000002fe : 00000000;  % 1138: 	nop %
000002ff : 00000000;  % 1139: 	nop %
00000300 : 8d990000;  % 1143: 	lw $t9, 0($t4)	#le o que tem no endereco %
00000301 : 24060000;  % 1145: 	li $a2,0 %
00000302 : 00000000;  % 1146: 	nop %
00000303 : 00000000;  % 1147: 	nop %
00000304 : 13460020;  % 1148: 	beq $k0,$a2,Jzero %
00000305 : 24060001;  % 1149: 	li $a2,1 %
00000306 : 00000000;  % 1150: 	nop %
00000307 : 00000000;  % 1151: 	nop %
00000308 : 13460016;  % 1152: 	beq $k0,$a2,Jum %
00000309 : 00000000;  % 1153: 	nop %
0000030a : 00000000;  % 1154: 	nop %
0000030b : 24060002;  % 1155: 	li $a2,2 %
0000030c : 00000000;  % 1156: 	nop %
0000030d : 00000000;  % 1157: 	nop %
0000030e : 13460008;  % 1158: 	beq $k0,$a2,Jdois %
0000030f : 3c0100ff;  % 1160: Jtres:	la $k1,0x00FFFFFF %
00000310 : 343bffff;  % 1160:  %
00000311 : 00000000;  % 1161: 	nop %
00000312 : 00000000;  % 1162: 	nop %
00000313 : 000d6e00;  % 1165: 	sll $t5,$t5,24 %
00000314 : 241a0000;  % 1166: 	li $k0,0 %
00000315 : 24070004;  % 1167: 	li $a3,4 %
00000316 : 0800032b;  % 1168: 	j Jsai %
00000317 : 3c01ff00;  % 1169: Jdois:	la $k1,0xFF00FFFF %
00000318 : 343bffff;  % 1169:  %
00000319 : 00000000;  % 1170: 	nop %
0000031a : 00000000;  % 1171: 	nop %
0000031b : 000d6c00;  % 1174: 	sll $t5,$t5,16 %
0000031c : 241a0003;  % 1175: 	li $k0,3 %
0000031d : 24070000;  % 1176: 	li $a3,0 %
0000031e : 0800032b;  % 1177: 	j Jsai %
0000031f : 3c01ffff;  % 1178: Jum:	la $k1,0xFFFF00FF %
00000320 : 343b00ff;  % 1178:  %
00000321 : 000d6a00;  % 1181: 	sll $t5,$t5,8 %
00000322 : 24070000;  % 1182: 	li $a3,0 %
00000323 : 241a0002;  % 1183: 	li $k0,2 %
00000324 : 0800032b;  % 1184: 	j Jsai %
00000325 : 241bff00;  % 1185: Jzero: la $k1,0xFFFFFF00 %
00000326 : 00000000;  % 1186: 	nop %
00000327 : 00000000;  % 1187: 	nop %
00000328 : 000d6800;  % 1190: 	sll $t5,$t5,0  %
00000329 : 241a0001;  % 1191: 	li $k0,1 %
0000032a : 24070000;  % 1192: 	li $a3,0 %
0000032b : 033bc824;  % 1194: Jsai:	and $t9,$t9,$k1 %
0000032c : 01b96825;  % 1195: 	or $t5,$t5,$t9 %
0000032d : ad8d0000;  % 1198: PPULA:	sw $t5, 0($t4) 		#guarda char valido %
0000032e : 01274820;  % 1200: 	add $t1, $t1, $a3 	#caractere inserido, atualiza contador %
0000032f : 000ac020;  % 1202: atualizaBufferString: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
00000330 : 1040ffa2;  % 1203: 	beq $v0,$zero,loopReadString %
00000331 : 03e00008;  % 1207: 	jr $ra %
00000332 : 24020001;  % 1210: fimReadString: li $v0,1 #ultimo %
00000333 : 240d0000;  % 1211: 	li $t5,0 #zero %
00000334 : 080002fd;  % 1212: 	j VoltaZeroString %
00000335 : 3c01ffff;  % 1235:     la $t0, 0xFFFF0200 %
00000336 : 34280200;  % 1235:  %
00000337 : 00004820;  % 1236:     add $t1, $zero, $zero %
00000338 : 30ca000f;  % 1241:     andi $t2, $a2, 0x0000000F %
00000339 : 000a56c0;  % 1242:     sll $t2, $t2, 27 %
0000033a : 012a4825;  % 1243:     or $t1, $t1, $t2 %
0000033b : 30ea007f;  % 1246:     andi $t2, $a3, 0x0000007F %
0000033c : 000a5500;  % 1247:     sll $t2, $t2, 20 %
0000033d : 012a4825;  % 1248:     or $t1, $t1, $t2 %
0000033e : 308a007f;  % 1251:     andi $t2, $a0, 0x0000007F %
0000033f : 000a5340;  % 1252:     sll $t2, $t2, 13 %
00000340 : 012a4825;  % 1253:     or $t1, $t1, $t2 %
00000341 : 30aa1fff;  % 1256:     andi $t2, $a1, 0x00001FFF %
00000342 : 012a4825;  % 1257:     or $t1, $t1, $t2 %
00000343 : 08000344;  % 1260:     j SintMidOut %
00000344 : ad090000;  % 1263:     sw $t1, 0($t0) %
00000345 : 3c01ffff;  % 1266:     la $t2, 0xFFFF0204 %
00000346 : 342a0204;  % 1266:  %
00000347 : 8d4b0000;  % 1268:     lw $t3, 0($t2) %
00000348 : 1160fffe;  % 1269:     beq $t3, $zero, Check_AUD_DACLRCK %
00000349 : 03e00008;  % 1270:     jr $ra %
0000034a : 3c01ffff;  % 1291:     la $t0, 0xFFFF0200 %
0000034b : 34280200;  % 1291:  %
0000034c : 00004820;  % 1292:     add $t1, $zero, $zero %
0000034d : 3c018000;  % 1295:     ori $t1, $t1, 0x80000000 %
0000034e : 34210000;  % 1295:  %
0000034f : 01214825;  % 1295:  %
00000350 : 30ca000f;  % 1298:     andi $t2, $a2, 0x0000000F %
00000351 : 000a56c0;  % 1299:     sll $t2, $t2, 27 %
00000352 : 012a4825;  % 1300:     or $t1, $t1, $t2 %
00000353 : 30ea007f;  % 1303:     andi $t2, $a3, 0x0000007F %
00000354 : 000a5500;  % 1304:     sll $t2, $t2, 20 %
00000355 : 012a4825;  % 1305:     or $t1, $t1, $t2 %
00000356 : 308a007f;  % 1308:     andi $t2, $a0, 0x0000007F %
00000357 : 000a5340;  % 1309:     sll $t2, $t2, 13 %
00000358 : 012a4825;  % 1310:     or $t1, $t1, $t2 %
00000359 : 30aa1fff;  % 1313:     andi $t2, $a1, 0x00001FFF %
0000035a : 012a4825;  % 1314:     or $t1, $t1, $t2 %
0000035b : 0800035c;  % 1317:     j SintMidOutSync %
0000035c : ad090000;  % 1320:     sw $t1, 0($t0) %
0000035d : 3c01ffff;  % 1323:     la $t2, 0xFFFF0204 %
0000035e : 342a0204;  % 1323:  %
0000035f : 3c01ffff;  % 1324:     la $t4, 0xFFFF0208 %
00000360 : 342c0208;  % 1324:  %
00000361 : 8d4b0000;  % 1327:     lw $t3, 0($t2) %
00000362 : 1160fffe;  % 1328:     beq $t3, $zero, Check_AUD_DACLRCKSync %
00000363 : 8d8d0000;  % 1330:     lw $t5, 0($t4) %
00000364 : 15a0fffe;  % 1331:     bne $t5, $zero, Melody %
00000365 : 03e00008;  % 1332:     jr $ra %
00000366 : 20020000;  % 1342: inKey: addi $v0, $zero, 0 %
00000367 : 20030000;  % 1343: 	addi $v1, $zero, 0 %
00000368 : 3c01ffff;  % 1346: 	la $t0,0xFFFF0100 %
00000369 : 34280100;  % 1346:  %
0000036a : 00000000;  % 1347: 	nop %
0000036b : 00000000;  % 1348: 	nop %
0000036c : 3c01ffff;  % 1351: 	la $t1, 0xFFFF0104 %
0000036d : 34290104;  % 1351:  %
0000036e : 00000000;  % 1352: 	nop %
0000036f : 00000000;  % 1353: 	nop %
00000370 : 8d180000;  % 1356: 	lw $t8, 0($t0)	#buffer inicial %
00000371 : 8d390000;  % 1357: 	lw $t9, 0 ($t1)	#buffer inicial %
00000372 : 8d0a0000;  % 1359: loopInKey: lw $t2, 0($t0) %
00000373 : 8d2b0000;  % 1361: 	lw $t3, 0($t1) %
00000374 : 3c0100ff;  % 1374: 	andi $t4, $t2, 0xFF0000     #pseudo %
00000375 : 34210000;  % 1374:  %
00000376 : 01416024;  % 1374:  %
00000377 : 00000000;  % 1375: 	nop %
00000378 : 00000000;  % 1376: 	nop %
00000379 : 000c6402;  % 1377: 	srl $t4, $t4, 16 %
0000037a : 000c6080;  % 1378: 	sll $t4, $t4, 2 #mult 4 %
0000037b : 3c019000;  % 1379: 	la $t5, inicioKdata %
0000037c : 342d0000;  % 1379:  %
0000037d : 00000000;  % 1380: 	nop %
0000037e : 00000000;  % 1381: 	nop %
0000037f : 018d6020;  % 1382: 	add $t4, $t4, $t5 #inicio endereco na memoria %
00000380 : 00000000;  % 1383: 	nop %
00000381 : 00000000;  % 1384: 	nop %
00000382 : 218c0318;  % 1385: 	addi $t4, $t4, 0x318 #final da string para o printChar %
00000383 : 00000000;  % 1386: 	nop %
00000384 : 00000000;  % 1387: 	nop %
00000385 : 8d8d0000;  % 1388: 	lw $t5, 0($t4) #posicao na memoria %
00000386 : 000d1020;  % 1389: 	add $v0, $zero, $t5 %
00000387 : 314c00ff;  % 1391: 	andi $t4, $t2, 0xFF %
00000388 : 00000000;  % 1392: 	nop %
00000389 : 00000000;  % 1393: 	nop %
0000038a : 000c6080;  % 1394: 	sll $t4, $t4, 2 #mult 4 %
0000038b : 3c019000;  % 1395: 	la $t5, inicioKdata %
0000038c : 342d0000;  % 1395:  %
0000038d : 00000000;  % 1396: 	nop %
0000038e : 00000000;  % 1397: 	nop %
0000038f : 018d6020;  % 1398: 	add $t4, $t4, $t5 #inicio endereco na memoria %
00000390 : 00000000;  % 1399: 	nop %
00000391 : 00000000;  % 1400: 	nop %
00000392 : 218c0318;  % 1401: 	addi $t4, $t4, 0x318 #final da string para o printChar %
00000393 : 00000000;  % 1402: 	nop %
00000394 : 00000000;  % 1403: 	nop %
00000395 : 8d8d0000;  % 1404: 	lw $t5, 0($t4) #posicao na memoria %
00000396 : 000d1820;  % 1405: 	add $v1, $zero, $t5 %
00000397 : 03e00008;  % 1407: 	jr $ra %
00000398 : 3c01ff00;  % 1416: CLS:	la $t6,0xFF000000  # Memoria VGA %
00000399 : 342e0000;  % 1416:  %
0000039a : 00000000;  % 1417: 	nop %
0000039b : 00000000;  % 1418: 	nop %
0000039c : 3c01ff01;  % 1419: 	la $t2,0xFF012C00 %
0000039d : 342a2c00;  % 1419:  %
0000039e : 00000000;  % 1420: 	nop %
0000039f : 00000000;  % 1421: 	nop %
000003a0 : 114e0004;  % 1422: Fort3:  beq $t2,$t6, Endt3 %
000003a1 : a1c40000;  % 1423: 	sb $a0,0($t6) %
000003a2 : 21ce0001;  % 1424: 	addi $t6, $t6, 1 %
000003a3 : 00000000;  % 1425: 	nop %
000003a4 : 080003a0;  % 1426: 	j Fort3 %
000003a5 : 03e00008;  % 1427: Endt3:  jr $ra %
000003a6 : 23bdfff4;  % 1438: popEvent: addi $sp, $sp, -12 %
000003a7 : afa40000;  % 1439: 	sw $a0, 0($sp) %
000003a8 : afb00004;  % 1440: 	sw $s0, 4($sp) %
000003a9 : afbf0008;  % 1441: 	sw $ra, 8($sp) %
000003aa : 3c019000;  % 1444: 	la $s0, eventQueueBeginPtr %
000003ab : 34300778;  % 1444:  %
000003ac : 00000000;  % 1445: 	nop %
000003ad : 00000000;  % 1446: 	nop %
000003ae : 8e1a0000;  % 1447: 	lw $k0, 0($s0) %
000003af : 3c019000;  % 1448: 	la $k1, eventQueueEndPtr %
000003b0 : 343b077c;  % 1448:  %
000003b1 : 00000000;  % 1449: 	nop %
000003b2 : 00000000;  % 1450: 	nop %
000003b3 : 8f7b0000;  % 1451: 	lw $k1, 0($k1) %
000003b4 : 24020000;  % 1452: 	li $v0, 0 %
000003b5 : 00000000;  % 1453: 	nop %
000003b6 : 135b0005;  % 1454: 	beq $k0, $k1, popEventEnd %
000003b7 : 001a2021;  % 1457: 	move $a0, $k0 %
000003b8 : 0c0000ba;  % 1458: 	jal eventQueueIncrementPointer %
000003b9 : ae020000;  % 1459: 	sw $v0, 0($s0) %
000003ba : 24020001;  % 1460: 	li $v0, 1 %
000003bb : 8f430000;  % 1461: 	lw $v1, 0($k0) %
000003bc : 8fbf0008;  % 1463: popEventEnd: lw $ra, 8($sp) %
000003bd : 8fb00004;  % 1464: 	lw $s0, 4($sp) %
000003be : 8fa40000;  % 1465: 	lw $a0, 0($sp) %
000003bf : 23bd000c;  % 1466: 	addi $sp, $sp, 12 %
000003c0 : 03e00008;  % 1467: 	jr $ra %

END;
