DEPTH = 2048;
WIDTH = 32;
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN

00000000 : 23bdfff8;  % 60: exceptionHandling: addi $sp,$sp,-8 %
00000001 : afa10000;  % 61: 	sw $at,0($sp) %
00000002 : afbf0004;  % 62: 	sw $ra,4($sp) %
00000003 : 201a0020;  % 63: 	addi $k0, $zero, 32 # default syscall exception=8*4 %
00000004 : 401a6800;  % 64: 	mfc0 $k0, $13  #nao esta implementada no pipe %
00000005 : 00000000;  % 65: 	nop  #nao retirar! %
00000006 : 335a007c;  % 66: 	andi $k0, $k0, 0x007C %
00000007 : 001ad082;  % 67: 	srl $k0, $k0, 2 %
00000008 : 201b000c;  % 69: 	addi $k1, $zero, 12 # overflow na ULA %
00000009 : 137a0010;  % 70: 	beq $k1, $k0, ALUOverflowException %
0000000a : 201b000f;  % 72: 	addi $k1, $zero, 15 # excecao de ponto flutuante %
0000000b : 137a000f;  % 73: 	beq $k1, $k0, FPALUException %
0000000c : 201b0000;  % 75: 	addi $k1, $zero, 0 # interrupcao %
0000000d : 137a000e;  % 76: 	beq $k1, $k0, interruptException %
0000000e : 201b000a;  % 78: 	addi $k1, $zero, 10 # instrucao reservada ou invalida %
0000000f : 137a00ba;  % 79: 	beq $k1, $k0, instructionException %
00000010 : 201b0008;  % 81: 	addi $k1, $zero, 8 # syscall %
00000011 : 137a00c8;  % 82: 	beq $k1, $k0, syscallException %
00000012 : 8fbf0004;  % 84: endException:	lw $ra,4($sp) %
00000013 : 8fa10000;  % 85: 		lw $at,0($sp) %
00000014 : 23bd0008;  % 86: 		addi $sp,$sp,8 %
00000015 : 401a7000;  % 88: 		mfc0 $k0,$14    #### EPC + 4     #nao esta implementada no pipe %
00000016 : 235a0004;  % 89: 		addi $k0,$k0,4 %
00000017 : 409a7000;  % 90: 		mtc0 $k0,$14  #nao esta implementada no pipe %
00000018 : 42000018;  % 91: 		eret          #nao esta implementada no pipe %
00000019 : 03e00008;  % 92: 		jr $ra  #para o caso do eret nao estar implementado (pipeline) %
0000001a : 08000012;  % 94: ALUOverflowException: 	j endException %
0000001b : 08000012;  % 98: FPALUException: 	j endException %
0000001c : 401a6800;  % 102: interruptException: 	mfc0 $k0, $13 %
0000001d : 335aff00;  % 103: 	andi $k0, $k0, 0xFF00 %
0000001e : 001ad202;  % 104: 	srl $k0, $k0, 8 %
0000001f : 335b0001;  % 106: 	andi $k1, $k0, 0x0001 %
00000020 : 17600076;  % 107: 	bne $k1, $zero, keyboardInterrupt %
00000021 : 335b0002;  % 109: 	andi $k1, $k0, 0x0002 %
00000022 : 17600006;  % 110: 	bne $k1, $zero, audioInterrupt %
00000023 : 335b0004;  % 112: 	andi $k1, $k0, 0x0004 %
00000024 : 17600005;  % 113: 	bne $k1, $zero, mouseInterrupt	 %
00000025 : 335b0008;  % 115: 	andi $k1, $k0, 0x0008  #verificar se nao  seria 0x0008 %
00000026 : 17600001;  % 116: 	bne $k1, $zero, counterInterrupt %
00000027 : 08000012;  % 118: 	j endException %
00000028 : 08000012;  % 120: counterInterrupt: 	j endException %
00000029 : 08000012;  % 123: audioInterrupt: 	j endException %
0000002a : 3c01ffff;  % 127: mouseInterrupt:	la $k0,0xFFFF0114 #endereço do buffer_mouse %
0000002b : 343a0114;  % 127:  %
0000002c : 00000000;  % 128: 	nop %
0000002d : 00000000;  % 129: 	nop %
0000002e : 8f5a0000;  % 130: 	lw $k0,0($k0) #carrega o buffer em k0 %
0000002f : 00000000;  % 131: 	nop %
00000030 : 00000000;  % 132: 	nop %
00000031 : 335b00ff;  % 133: 	andi $k1,$k0,0xFF %
00000032 : 23bdfff8;  % 135: 	addi $sp,$sp,-8 %
00000033 : afa80000;  % 136: 	sw $t0,0($sp) %
00000034 : afa90004;  % 137: 	sw $t1,4($sp) %
00000035 : 3c0100ff;  % 142: 	li $k1,0x00ff0000 %
00000036 : 343b0000;  % 142:  %
00000037 : 00000000;  % 143: 	nop %
00000038 : 00000000;  % 144: 	nop %
00000039 : 035bd824;  % 145: 	and $k1,$k0,$k1 %
0000003a : 00000000;  % 146: 	nop %
0000003b : 00000000;  % 147: 	nop %
0000003c : 001bdc02;  % 148: 	srl $k1,$k1,16 %
0000003d : 33680001;  % 150: 	andi $t0,$k1,1 %
0000003e : 24090000;  % 152: 	li $t1,0 %
0000003f : 11000001;  % 153: 	beq $t0,$zero,MOUSEPULAESQ %
00000040 : 2409000f;  % 154: 	li $t1,0xF %
00000041 : 33680002;  % 156: 	MOUSEPULAESQ: andi $t0,$k1,2 %
00000042 : 00000000;  % 157: 	nop %
00000043 : 00000000;  % 158: 	nop %
00000044 : 00084042;  % 159: 	srl $t0,$t0,1 %
00000045 : 11000001;  % 161: 	beq $t0,$zero,MOUSEPULADIR %
00000046 : 352900f0;  % 162: 	ori $t1,$t1,0xF0 %
00000047 : 33680004;  % 164: 	MOUSEPULADIR: andi $t0,$k1,4 %
00000048 : 00084082;  % 165: 	srl $t0,$t0,2 %
00000049 : 11000003;  % 167: 	beq $t0,$zero,MOUSEPULAMEIO %
0000004a : 35290f00;  % 168: 	ori $t1,$t1,0xF00 %
0000004b : 00000000;  % 169: 	nop %
0000004c : 00000000;  % 170: 	nop %
0000004d : 3c019000;  % 171: 	MOUSEPULAMEIO: sw $t1,DATA_CLICKS($zero)    ########### ENDERECO ERRADO!!!!!!! %
0000004e : 00200821;  % 171:  %
0000004f : ac2907ac;  % 171:  %
00000050 : 33680010;  % 174: 	andi $t0,$k1,0x10 %
00000051 : 00000000;  % 175: 	nop %
00000052 : 00000000;  % 176: 	nop %
00000053 : 00084102;  % 177: 	srl $t0,$t0,4 #t0=(sinal) %
00000054 : 3409ff00;  % 178: 	la $t1,0x0000ff00 %
00000055 : 00000000;  % 179: 	nop %
00000056 : 00000000;  % 180: 	nop %
00000057 : 013a4824;  % 181: 	and $t1,$t1,$k0 %
00000058 : 00094a02;  % 182: 	srl $t1,$t1,8 %
00000059 : 11000004;  % 183: 	beq $t0,$zero,pulasinalmousex %
0000005a : 2408ff00;  % 184: 	la $t0,0xffffff00 %
0000005b : 00000000;  % 185: 	nop %
0000005c : 00000000;  % 186: 	nop %
0000005d : 01284825;  % 187: 	or $t1,$t1,$t0 %
0000005e : 3c019000;  % 189: 	pulasinalmousex: lw $t0,DATA_X($zero)    ################ ENDERECO ERRADO %
0000005f : 00200821;  % 189:  %
00000060 : 8c2807a4;  % 189:  %
00000061 : 00000000;  % 190: 	nop %
00000062 : 00000000;  % 191: 	nop %
00000063 : 01094020;  % 192: 	add $t0,$t0,$t1 %
00000064 : 24090140;  % 193: 	li $t1,320 %
00000065 : 00000000;  % 194: 	nop %
00000066 : 00000000;  % 195: 	nop %
00000067 : 0109482a;  % 196: 	slt $t1,$t0,$t1 %
00000068 : 15200001;  % 197: 	bne $t1,$zero,mouseliberax320 %
00000069 : 24080140;  % 198: 	li $t0,320 %
0000006a : 24090000;  % 200: 	mouseliberax320: li $t1,0 %
0000006b : 0109482a;  % 201: 	slt $t1,$t0,$t1 %
0000006c : 11200001;  % 202: 	beq $t1,$zero,mouseliberax0 %
0000006d : 24080000;  % 203: 	li $t0,0 %
0000006e : 3c019000;  % 205: 	mouseliberax0: sw $t0,DATA_X($zero)    ############END ERRADO %
0000006f : 00200821;  % 205:  %
00000070 : ac2807a4;  % 205:  %
00000071 : 33680020;  % 208: 	andi $t0,$k1,0x20 %
00000072 : 00000000;  % 209: 	nop %
00000073 : 00000000;  % 210: 	nop %
00000074 : 00084142;  % 211: 	srl $t0,$t0,5 #t0=(sinal) %
00000075 : 240900ff;  % 212: 	la $t1,0x000000ff %
00000076 : 013a4824;  % 213: 	and $t1,$t1,$k0 %
00000077 : 11000004;  % 214: 	beq $t0,$zero,pulasinalmousey %
00000078 : 2408ff00;  % 215: 	la $t0,0xffffff00 %
00000079 : 00000000;  % 216: 	nop %
0000007a : 00000000;  % 217: 	nop %
0000007b : 01284825;  % 218: 	or $t1,$t1,$t0 %
0000007c : 01294827;  % 221: 	pulasinalmousey: nor $t1,$t1,$t1 %
0000007d : 21290001;  % 222: 	addi $t1,$t1,1 #t1=delta y %
0000007e : 3c019000;  % 223: 	lw $t0,DATA_Y($zero)              ############# ENDERECO ERRADO %
0000007f : 00200821;  % 223:  %
00000080 : 8c2807a8;  % 223:  %
00000081 : 01094020;  % 224: 	add $t0,$t0,$t1 %
00000082 : 240900f0;  % 225: 	li $t1,240 %
00000083 : 00000000;  % 226: 	nop %
00000084 : 00000000;  % 227: 	nop %
00000085 : 0109482a;  % 228: 	slt $t1,$t0,$t1 %
00000086 : 15200001;  % 229: 	bne $t1,$zero,mouseliberay240 %
00000087 : 240800f0;  % 230: 	li $t0,240 %
00000088 : 24090000;  % 232: 	mouseliberay240: li $t1,0 %
00000089 : 00000000;  % 233: 	nop %
0000008a : 00000000;  % 234: 	nop %
0000008b : 0109482a;  % 235: 	slt $t1,$t0,$t1 %
0000008c : 11200001;  % 236: 	beq $t1,$zero,mouseliberay0 %
0000008d : 24080000;  % 237: 	li $t0,0 %
0000008e : 3c019000;  % 239: 	mouseliberay0: sw $t0,DATA_Y($zero)    ####################END ERRADO %
0000008f : 00200821;  % 239:  %
00000090 : ac2807a8;  % 239:  %
00000091 : 00000000;  % 240: 	nop %
00000092 : 00000000;  % 241: 	nop %
00000093 : 8fa80000;  % 242: 	lw $t0,0($sp) %
00000094 : 8fa90004;  % 243: 	lw $t1,4($sp) %
00000095 : 23bd0008;  % 244: 	addi $sp,$sp,8 %
00000096 : 08000012;  % 246: 	j endException %
00000097 : 23bdfff8;  % 250: keyboardInterrupt: addi $sp, $sp, -8 %
00000098 : afa40000;  % 251: 	sw $a0, 0($sp) %
00000099 : afa20004;  % 252: 	sw $v0, 4($sp) %
0000009a : 3c019000;  % 255: 	la $a0, eventQueueEndPtr %
0000009b : 342407a0;  % 255:  %
0000009c : 00000000;  % 256: 	nop %
0000009d : 00000000;  % 257: 	nop %
0000009e : 8c840000;  % 258: 	lw $a0, 0($a0) %
0000009f : 0c0000ba;  % 259: 	jal eventQueueIncrementPointer %
000000a0 : 3c019000;  % 260: 	la $k0, eventQueueBeginPtr %
000000a1 : 343a079c;  % 260:  %
000000a2 : 00000000;  % 261: 	nop %
000000a3 : 00000000;  % 262: 	nop %
000000a4 : 8f5a0000;  % 263: 	lw $k0, 0($k0) %
000000a5 : 00000000;  % 264: 	nop %
000000a6 : 00000000;  % 265: 	nop %
000000a7 : 1342000e;  % 266: 	beq $k0, $v0, keyboardInterruptEnd %
000000a8 : 3c01ffff;  % 269: 	la $k0, 0xFFFF0100 %
000000a9 : 343a0100;  % 269:  %
000000aa : 00000000;  % 270: 	nop %
000000ab : 00000000;  % 271: 	nop %
000000ac : 8f5a0000;  % 272: 	lw $k0, 0($k0) %
000000ad : 00000000;  % 273: 	nop %
000000ae : 00000000;  % 274: 	nop %
000000af : 001ac821;  % 275: 	move $t9, $k0 %
000000b0 : ac9a0000;  % 278: 	sw $k0, 0($a0) %
000000b1 : 3c019000;  % 279: 	la $k0, eventQueueEndPtr %
000000b2 : 343a07a0;  % 279:  %
000000b3 : 00000000;  % 280: 	nop %
000000b4 : 00000000;  % 281: 	nop %
000000b5 : af420000;  % 282: 	sw $v0, 0($k0) %
000000b6 : 8fa40000;  % 284: 	keyboardInterruptEnd: lw $a0, 0($sp) %
000000b7 : 8fa20004;  % 285: 	lw $v0, 4($sp) %
000000b8 : 23bd0008;  % 286: 	addi $sp, $sp, 8 %
000000b9 : 08000012;  % 288: 	j endException	 %
000000ba : 20820004;  % 291: 	eventQueueIncrementPointer: addi $v0, $a0, 4 %
000000bb : 3c019000;  % 292: 	la $t0, eventQueueEndAddr %
000000bc : 34280798;  % 292:  %
000000bd : 00000000;  % 293: 	nop %
000000be : 00000000;  % 294: 	nop %
000000bf : 8d080000;  % 295: 	lw $t0, 0($t0) %
000000c0 : 00000000;  % 296: 	nop %
000000c1 : 00000000;  % 297: 	nop %
000000c2 : 11020001;  % 298: 	beq $t0, $v0, eventQueueIncrementPointerIf %
000000c3 : 03e00008;  % 299: 	jr $ra %
000000c4 : 3c019000;  % 301: 	eventQueueIncrementPointerIf: la $v0, eventQueueBeginAddr %
000000c5 : 34220794;  % 301:  %
000000c6 : 00000000;  % 302: 	nop %
000000c7 : 00000000;  % 303: 	nop %
000000c8 : 8c420000;  % 304: 	lw $v0, 0($v0) %
000000c9 : 03e00008;  % 305: 	jr $ra %
000000ca : 3c019000;  % 310: instructionException: la $t0, instructionMessage %
000000cb : 34280748;  % 310:  %
000000cc : 3c01ffff;  % 311: 	la $t9, 0xFFFF0130 %
000000cd : 34390130;  % 311:  %
000000ce : 00000000;  % 312: 	nop %
000000cf : 00000000;  % 313: 	nop %
000000d0 : af200020;  % 314: 	sw $zero, 0x20($t9) %
000000d1 : 81090000;  % 315: 	lb $t1,0($t0)   #primeiro caractere %
000000d2 : 00000000;  % 316: 	nop %
000000d3 : 00000000;  % 317: 	nop %
000000d4 : 112000b9;  % 318: 	instructionExceptionLoop: beq $t1,$zero, goToExit   ## fim da string %
000000d5 : a3290000;  % 319: 	sb $t1,0($t9) %
000000d6 : 21080001;  % 320: 	addi $t0,$t0,1 %
000000d7 : 23390001;  % 321: 	addi $t9,$t9,1 %
000000d8 : 81090000;  % 322: 	lb $t1,0($t0)	 %
000000d9 : 080000d4;  % 323: 	j instructionExceptionLoop %
000000da : 23bdff00;  % 328: syscallException: addi $sp, $sp, -256   			# Salva todos os registradores na pilha %
000000db : afa10000;  % 329: 	sw $1,0($sp) %
000000dc : afa20004;  % 330: 	sw $2,4($sp) %
000000dd : afa30008;  % 331: 	sw $3,8($sp) %
000000de : afa4000c;  % 332: 	sw $4,12($sp) %
000000df : afa50010;  % 333: 	sw $5,16($sp) %
000000e0 : afa60014;  % 334: 	sw $6,20($sp) %
000000e1 : afa70018;  % 335: 	sw $7,24($sp) %
000000e2 : afa8001c;  % 336: 	sw $8,28($sp) %
000000e3 : afa90020;  % 337: 	sw $9,32($sp) %
000000e4 : afaa0024;  % 338: 	sw $10,36($sp) %
000000e5 : afab0028;  % 339: 	sw $11,40($sp) %
000000e6 : afac002c;  % 340: 	sw $12,44($sp) %
000000e7 : afad0030;  % 341: 	sw $13,48($sp) %
000000e8 : afae0034;  % 342: 	sw $14,52($sp) %
000000e9 : afaf0038;  % 343: 	sw $15,56($sp) %
000000ea : afb0003c;  % 344: 	sw $16,60($sp) %
000000eb : afb10040;  % 345: 	sw $17,64($sp) %
000000ec : afb20044;  % 346: 	sw $18,68($sp) %
000000ed : afb30048;  % 347: 	sw $19,72($sp) %
000000ee : afb4004c;  % 348: 	sw $20,76($sp) %
000000ef : afb50050;  % 349: 	sw $21,80($sp) %
000000f0 : afb60054;  % 350: 	sw $22,84($sp) %
000000f1 : afb70058;  % 351: 	sw $23,88($sp) %
000000f2 : afb8005c;  % 352: 	sw $24,92($sp) %
000000f3 : afb90060;  % 353: 	sw $25,96($sp) %
000000f4 : afba0064;  % 354: 	sw $26,100($sp) %
000000f5 : afbb0068;  % 355: 	sw $27,104($sp) %
000000f6 : afbc006c;  % 356: 	sw $28,108($sp) %
000000f7 : afbd0070;  % 357: 	sw $29,112($sp) %
000000f8 : afbe0074;  % 358: 	sw $30,116($sp) %
000000f9 : afbf0078;  % 359: 	sw $31,120($sp) %
000000fa : e7a0007c;  % 360: 	swc1 $f0,124($sp) %
000000fb : e7a10080;  % 361: 	swc1 $f1,128($sp) %
000000fc : e7a20084;  % 362: 	swc1 $f2,132($sp) %
000000fd : e7a30088;  % 363: 	swc1 $f3,136($sp) %
000000fe : e7a4008c;  % 364: 	swc1 $f4,140($sp) %
000000ff : e7a50090;  % 365: 	swc1 $f5,144($sp) %
00000100 : e7a60094;  % 366: 	swc1 $f6,148($sp) %
00000101 : e7a70098;  % 367: 	swc1 $f7,152($sp) %
00000102 : e7a8009c;  % 368: 	swc1 $f8,156($sp) %
00000103 : e7a900a0;  % 369: 	swc1 $f9,160($sp) %
00000104 : e7aa00a4;  % 370: 	swc1 $f10,164($sp) %
00000105 : e7ab00a8;  % 371: 	swc1 $f11,168($sp) %
00000106 : e7ac00ac;  % 372: 	swc1 $f12,172($sp) %
00000107 : e7ad00b0;  % 373: 	swc1 $f13,176($sp) %
00000108 : e7ae00b4;  % 374: 	swc1 $f14,180($sp) %
00000109 : e7af00b8;  % 375: 	swc1 $f15,184($sp) %
0000010a : e7b000bc;  % 376: 	swc1 $f16,188($sp) %
0000010b : e7b100c0;  % 377: 	swc1 $f17,192($sp) %
0000010c : e7b200c4;  % 378: 	swc1 $f18,196($sp) %
0000010d : e7b300c8;  % 379: 	swc1 $f19,200($sp) %
0000010e : e7b400cc;  % 380: 	swc1 $f20,204($sp) %
0000010f : e7b500d0;  % 381: 	swc1 $f21,208($sp) %
00000110 : e7b600d4;  % 382: 	swc1 $f22,212($sp) %
00000111 : e7b700d8;  % 383: 	swc1 $f23,216($sp) %
00000112 : e7b800dc;  % 384: 	swc1 $f24,220($sp) %
00000113 : e7b900e0;  % 385: 	swc1 $f25,224($sp) %
00000114 : e7ba00e4;  % 386: 	swc1 $f26,228($sp) %
00000115 : e7bb00e8;  % 387: 	swc1 $f27,232($sp) %
00000116 : e7bc00ec;  % 388: 	swc1 $f28,236($sp) %
00000117 : e7bd00f0;  % 389: 	swc1 $f29,240($sp) %
00000118 : e7be00f4;  % 390: 	swc1 $f30,244($sp) %
00000119 : e7bf00f8;  % 391: 	swc1 $f31,248($sp) %
0000011a : 2008000a;  % 394: 	addi $t0,$zero, 10 %
0000011b : 11020072;  % 395: 	beq $t0,$v0,goToExit		# syscall exit %
0000011c : 20080001;  % 397: 	addi $t0, $zero, 1				# sycall 1 = print int %
0000011d : 11020071;  % 398: 	beq $t0, $v0, goToPrintInt %
0000011e : 20080065;  % 399: 	addi $t0, $zero, 101				# sycall 1 = print int %
0000011f : 1102006f;  % 400: 	beq $t0, $v0, goToPrintInt %
00000120 : 20080002;  % 402: 	addi $t0, $zero, 2				# syscall 2 = print float %
00000121 : 11020073;  % 403: 	beq $t0, $v0, goToPrintFloat %
00000122 : 20080066;  % 404: 	addi $t0, $zero, 102				# syscall 2 = print float %
00000123 : 11020071;  % 405: 	beq $t0, $v0, goToPrintFloat %
00000124 : 20080004;  % 407: 	addi $t0, $zero, 4				# syscall 4 = print string %
00000125 : 1102006b;  % 408: 	beq $t0, $v0, goToPrintString %
00000126 : 20080068;  % 409: 	addi $t0, $zero, 104				# syscall 4 = print string %
00000127 : 11020069;  % 410: 	beq $t0, $v0, goToPrintString %
00000128 : 20080005;  % 412: 	addi $t0, $zero, 5				# syscall 5 = read int %
00000129 : 11020078;  % 413: 	beq $t0, $v0, goToReadInt %
0000012a : 20080069;  % 414: 	addi $t0, $zero, 105				# syscall 5 = read int %
0000012b : 11020076;  % 415: 	beq $t0, $v0, goToReadInt %
0000012c : 20080006;  % 417: 	addi $t0, $zero, 6				# syscall 6 = read float %
0000012d : 11020078;  % 418: 	beq $t0, $v0, goToReadFloat %
0000012e : 2008006a;  % 419: 	addi $t0, $zero, 106				# syscall 6 = read float %
0000012f : 11020076;  % 420: 	beq $t0, $v0, goToReadFloat %
00000130 : 20080008;  % 422: 	addi $t0, $zero, 8				# syscall 8 = read string %
00000131 : 11020072;  % 423: 	beq $t0, $v0, goToReadString %
00000132 : 2008006c;  % 424: 	addi $t0, $zero, 108				# syscall 8 = read string %
00000133 : 11020070;  % 425: 	beq $t0, $v0, goToReadString %
00000134 : 2008000b;  % 427: 	addi $t0, $zero, 11				# syscall 11 = print char %
00000135 : 1102005d;  % 428: 	beq $t0, $v0, goToPrintChar %
00000136 : 2008006f;  % 429: 	addi $t0, $zero, 111				# syscall 11 = print char %
00000137 : 1102005b;  % 430: 	beq $t0, $v0, goToPrintChar %
00000138 : 2008000c;  % 432: 	addi $t0, $zero, 12				# syscall 12 = read char %
00000139 : 11020066;  % 433: 	beq $t0, $v0, goToReadChar %
0000013a : 20080070;  % 434: 	addi $t0, $zero, 112				# syscall 12 = read char %
0000013b : 11020064;  % 435: 	beq $t0, $v0, goToReadChar %
0000013c : 2008002d;  % 441: 	addi $t0,$zero,45				# syscall 45 = plot %
0000013d : 1102005e;  % 442: 	beq $t0,$v0, goToPlot %
0000013e : 2008002e;  % 444: 	addi $t0,$zero,46				# syscall 46 = getplot %
0000013f : 1102005e;  % 445: 	beq $t0,$v0, goToGetPlot %
00000140 : 2008002f;  % 447: 	addi $t0, $zero, 47				# syscall 47 = inkey %
00000141 : 11020066;  % 448: 	beq $t0, $v0, goToInKey %
00000142 : 20080030;  % 450: 	addi $t0,$zero, 48				# syscall 48 = CLS		 %
00000143 : 11020066;  % 451: 	beq $t0, $v0, goToCLS %
00000144 : 20080096;  % 453: 	addi $t0,$zero, 150				# syscall 50 = pop event		 %
00000145 : 11020066;  % 454: 	beq $t0, $v0, goToPopEvent %
00000146 : 8fa10000;  % 459: 	lw $1,0($sp) %
00000147 : 8fa30008;  % 461: 	lw $3,8($sp) %
00000148 : 8fa60014;  % 464: 	lw $6,20($sp) %
00000149 : 8fa70018;  % 465: 	lw $7,24($sp) %
0000014a : 8fa8001c;  % 466: 	lw $8,28($sp) %
0000014b : 8fa90020;  % 467: 	lw $9,32($sp) %
0000014c : 8faa0024;  % 468: 	lw $10,36($sp) %
0000014d : 8fab0028;  % 469: 	lw $11,40($sp) %
0000014e : 8fac002c;  % 470: 	lw $12,44($sp) %
0000014f : 8fad0030;  % 471: 	lw $13,48($sp) %
00000150 : 8fae0034;  % 472: 	lw $14,52($sp) %
00000151 : 8faf0038;  % 473: 	lw $15,56($sp) %
00000152 : 8fb0003c;  % 474: 	lw $16,60($sp) %
00000153 : 8fb10040;  % 475: 	lw $17,64($sp) %
00000154 : 8fb20044;  % 476: 	lw $18,68($sp) %
00000155 : 8fb30048;  % 477: 	lw $19,72($sp) %
00000156 : 8fb4004c;  % 478: 	lw $20,76($sp) %
00000157 : 8fb50050;  % 479: 	lw $21,80($sp) %
00000158 : 8fb60054;  % 480: 	lw $22,84($sp) %
00000159 : 8fb70058;  % 481: 	lw $23,88($sp) %
0000015a : 8fb8005c;  % 482: 	lw $24,92($sp) %
0000015b : 8fb90060;  % 483: 	lw $25,96($sp) %
0000015c : 8fba0064;  % 484: 	lw $26,100($sp) %
0000015d : 8fbb0068;  % 485: 	lw $27,104($sp) %
0000015e : 8fbc006c;  % 486: 	lw $28,108($sp) %
0000015f : 8fbd0070;  % 487: 	lw $29,112($sp) %
00000160 : 8fbe0074;  % 488: 	lw $30,116($sp) %
00000161 : 8fbf0078;  % 489: 	lw $31,120($sp) %
00000162 : c7a10080;  % 491: 	lwc1 $f1,128($sp) %
00000163 : c7a20084;  % 492: 	lwc1 $f2,132($sp) %
00000164 : c7a30088;  % 493: 	lwc1 $f3,136($sp) %
00000165 : c7a4008c;  % 494: 	lwc1 $f4,140($sp) %
00000166 : c7a50090;  % 495: 	lwc1 $f5,144($sp) %
00000167 : c7a60094;  % 496: 	lwc1 $f6,148($sp) %
00000168 : c7a70098;  % 497: 	lwc1 $f7,152($sp) %
00000169 : c7a8009c;  % 498: 	lwc1 $f8,156($sp) %
0000016a : c7a900a0;  % 499: 	lwc1 $f9,160($sp) %
0000016b : c7aa00a4;  % 500: 	lwc1 $f10,164($sp) %
0000016c : c7ab00a8;  % 501: 	lwc1 $f11,168($sp) %
0000016d : c7ac00ac;  % 502: 	lwc1 $f12,172($sp)     %
0000016e : c7ad00b0;  % 503: 	lwc1 $f13,176($sp) %
0000016f : c7ae00b4;  % 504: 	lwc1 $f14,180($sp) %
00000170 : c7af00b8;  % 505: 	lwc1 $f15,184($sp) %
00000171 : c7b000bc;  % 506: 	lwc1 $f16,188($sp) %
00000172 : c7b100c0;  % 507: 	lwc1 $f17,192($sp) %
00000173 : c7b200c4;  % 508: 	lwc1 $f18,196($sp) %
00000174 : c7b300c8;  % 509: 	lwc1 $f19,200($sp) %
00000175 : c7b400cc;  % 510: 	lwc1 $f20,204($sp) %
00000176 : c7b500d0;  % 511: 	lwc1 $f21,208($sp) %
00000177 : c7b600d4;  % 512: 	lwc1 $f22,212($sp) %
00000178 : c7b700d8;  % 513: 	lwc1 $f23,216($sp) %
00000179 : c7b800dc;  % 514: 	lwc1 $f24,220($sp) %
0000017a : c7b900e0;  % 515: 	lwc1 $f25,224($sp) %
0000017b : c7ba00e4;  % 516: 	lwc1 $f26,228($sp) %
0000017c : c7bb00e8;  % 517: 	lwc1 $f27,232($sp) %
0000017d : c7bc00ec;  % 518: 	lwc1 $f28,236($sp) %
0000017e : c7bd00f0;  % 519: 	lwc1 $f29,240($sp) %
0000017f : c7be00f4;  % 520: 	lwc1 $f30,244($sp) %
00000180 : c7bf00f8;  % 521: 	lwc1 $f31,248($sp) %
00000181 : 23bd0100;  % 522: 	addi $sp, $sp, 256	 %
00000182 : 08000012;  % 524: 	j endException %
00000183 : 3c01ffff;  % 527: goToExit1: la $t9, 0xFFFF0130  # escreve FIM no LCD  <= RETIREI mudar o goToExit1  %
00000184 : 34390130;  % 527:  %
00000185 : 00000000;  % 528: 	nop %
00000186 : 00000000;  % 529: 	nop %
00000187 : a3200020;  % 530: 	sb $zero, 0x20($t9)  #limpa %
00000188 : 24080046;  % 531: 	li $t0,0x46 %
00000189 : a3280007;  % 532: 	sb $t0,0x07($t9) %
0000018a : 24080049;  % 533: 	li $t0,0x49 %
0000018b : a3280008;  % 534: 	sb $t0,0x08($t9) %
0000018c : 2408004d;  % 535: 	li $t0,0x4D %
0000018d : a3280009;  % 536: 	sb $t0,0x09($t9) %
0000018e : 0800018e;  % 538: goToExit: j goToExit  ########### syscall 10 %
0000018f : 0c0001ae;  % 540: goToPrintInt: jal printInt			# chama printInt %
00000190 : 08000146;  % 541: 	j endSyscall %
00000191 : 0c0001e5;  % 543: goToPrintString: jal printString		# chama printString %
00000192 : 08000146;  % 544: 	j endSyscall			 %
00000193 : 0c0001fe;  % 546: goToPrintChar: jal printChar			#chama printChar %
00000194 : 08000146;  % 547: 	j endSyscall %
00000195 : 3c019000;  % 549: goToPrintFloat: la $s6, FloatBuffer   #add $s6, $zero, $zero		#chama float e printstring %
00000196 : 3436076c;  % 549:  %
00000197 : 0c0003e5;  % 550: 	jal printFloat %
00000198 : 3c019000;  % 551: 	la $a0,FloatBuffer %
00000199 : 3424076c;  % 551:  %
0000019a : 0c0001e5;  % 552: 	jal printString %
0000019b : 08000146;  % 553: 	j endSyscall %
0000019c : 0c00024d;  % 555: goToPlot: jal Plot %
0000019d : 08000146;  % 556: 	j endSyscall %
0000019e : 0c00025a;  % 558: goToGetPlot: jal GetPlot %
0000019f : 08000146;  % 559: 	j endSyscall %
000001a0 : 0c000267;  % 561: goToReadChar: jal readChar			#chama readChar %
000001a1 : 08000146;  % 562: 	j endSyscall %
000001a2 : 0c0002c9;  % 564: goToReadInt: jal readInt			#chama readInt %
000001a3 : 08000146;  % 565: 	j endSyscall %
000001a4 : 0c00031c;  % 567: goToReadString: jal readString			#chama readString %
000001a5 : 08000146;  % 568: 		j endSyscall %
000001a6 : 0c000544;  % 570: goToReadFloat:  jal readFloat			#chama readFloat %
000001a7 : 08000146;  % 571: backReadFloat: 	j endSyscall %
000001a8 : 0c00038a;  % 573: goToInKey: jal inKey				#chama inKey %
000001a9 : 08000146;  % 574: 	j endSyscall %
000001aa : 0c0003bc;  % 576: goToCLS: jal CLS				#chama CLS %
000001ab : 08000146;  % 577: 	j endSyscall %
000001ac : 0c0003ca;  % 579: goToPopEvent: jal popEvent			#chama popEvent %
000001ad : 08000146;  % 580: 	j endSyscall %
000001ae : 23bdfffc;  % 592: printInt: addi $sp, $sp, -4   				# salva $ra %
000001af : afbf0000;  % 593: 	sw $ra, 0($sp) %
000001b0 : 14800007;  % 596: 	bne $a0, $zero, printNotZero				# chama printNotZero %
000001b1 : 20040030;  % 598: 	printZero: addi $a0, $zero, 48				# Imprime 0 %
000001b2 : 0c0001fe;  % 599: 		jal printChar %
000001b3 : 8fbf0000;  % 601: printIntEnd:	lw $ra, 0($sp)						#retorna %
000001b4 : 23bd0004;  % 602: 		addi $sp, $sp, 4 %
000001b5 : 00000000;  % 603: 		nop %
000001b6 : 00000000;  % 604: 		nop %
000001b7 : 03e00008;  % 605: 		jr $ra %
000001b8 : 00044020;  % 607: printNotZero: add $t0, $zero, $a0			# $t0 contem o valor do inteiro a ser impresso %
000001b9 : 2009000a;  % 608: 		addi $t1, $zero, 10					# $t1 eh uma constante 10 %
000001ba : 0100c82a;  % 609: 		slt $t9, $t0, $zero					# $t0 < 0 ? %
000001bb : 1320000d;  % 610: 		beq $t9, $zero, PrintIntContinue	# verifica se o valor eh negativo.  %
000001bc : 2004002d;  % 612: 		addi $a0, $zero, 45					# Negativo, imprime um '-' na tela %
000001bd : 23bdfff4;  % 614: 		addi $sp, $sp, -12 %
000001be : afbf0008;  % 615: 		sw $ra, 8($sp) %
000001bf : afa90004;  % 616: 		sw $t1, 4($sp) %
000001c0 : afa80000;  % 617: 		sw $t0, 0($sp)						# salva regs %
000001c1 : 0c0001fe;  % 619: 		jal printChar						# imprime ASCII 45 %
000001c2 : 8fbf0008;  % 621: 		lw $ra, 8($sp)						# recupera regs %
000001c3 : 8fa90004;  % 622: 		lw $t1, 4($sp) %
000001c4 : 8fa80000;  % 623: 		lw $t0, 0($sp) %
000001c5 : 23bd000c;  % 624: 		addi $sp, $sp, 12 %
000001c6 : 00084022;  % 626: 		sub $t0, $zero, $t0					# Torna $t0 positivo %
000001c7 : 20a50008;  % 627: 		addi $a1, $a1, 8					# incrementa a coluna %
000001c8 : 00005820;  % 628: 		add $t3, $zero, $zero				# $t3=0 %
000001c9 : 1100000b;  % 630: PrintIntContinue: beq $t0, $zero, PrintIntPop		# se $t0 é zero, nao há mais digitos para imprimir %
000001ca : 0109001a;  % 632: 		div $t0, $t1					# divide o valor por 10 %
000001cb : 00000000;  % 633: 		nop %
000001cc : 00000000;  % 634: 		nop %
000001cd : 00004012;  % 635: 		mflo $t0						# $t0 contem o valor dividido por 10 %
000001ce : 00005010;  % 636: 		mfhi $t2						# $t2 contem o ultimo digito a ser impresso %
000001cf : 00000000;  % 637: 		nop %
000001d0 : 00000000;  % 638: 		nop %
000001d1 : 23bdfffc;  % 639: 		addi $sp, $sp, -4 %
000001d2 : afaa0000;  % 640: 		sw $t2, 0($sp)					# empilha $t2 %
000001d3 : 216b0001;  % 642: 		addi $t3, $t3, 1				# conta quantos elementos (digitos) estão na pilha %
000001d4 : 080001c9;  % 643: 		j PrintIntContinue				# volta para ser dividido e empilhado de novo %
000001d5 : 1160ffdd;  % 645: PrintIntPop: beq $t3, $zero, printIntEnd	# ultimo digito endPrintInt %
000001d6 : 8fa40000;  % 647: 		lw $a0, 0($sp)					# le valor da pilha e coloca em $a0 %
000001d7 : 23bd0004;  % 648: 		addi $sp, $sp, 4 %
000001d8 : 00000000;  % 649: 		nop			#hazard lw addi %
000001d9 : 20840030;  % 650: 		addi $a0, $a0, 48				# código ASCII do dígito = numero + 48 %
000001da : 00000000;  % 651: 		nop %
000001db : 23bdfff8;  % 652: 		addi $sp, $sp, -8				# salva regs %
000001dc : afab0000;  % 653: 		sw $t3, 0($sp) %
000001dd : afbf0004;  % 654: 		sw $ra, 4($sp) %
000001de : 0c0001fe;  % 656: 		jal printChar					# imprime digito %
000001df : 8fbf0004;  % 658: 		lw $ra, 4($sp)					# recupera regs %
000001e0 : 8fab0000;  % 659: 		lw $t3, 0($sp) %
000001e1 : 23bd0008;  % 660: 		addi $sp, $sp, 8 %
000001e2 : 20a50008;  % 662: 		addi $a1, $a1, 8				# incrementa a coluna %
000001e3 : 216bffff;  % 663: 		addi $t3, $t3, -1				# decrementa contador %
000001e4 : 080001d5;  % 664: 		j PrintIntPop					# volta %
000001e5 : 23bdfffc;  % 679: printString:	addi $sp, $sp, -4			# salva $ra %
000001e6 : afbf0000;  % 680: 		sw $ra, 0($sp) %
000001e7 : 00044021;  % 682: 		move $t0, $a0					# $t0=endereco da string %
000001e8 : 81040000;  % 684: ForPrintString:	lb $a0, 0($t0)			# le em $a0 o caracter a ser impresso %
000001e9 : 10800010;  % 691: 		beq $a0, $zero, EndForPrintString	# string ASCIIZ termina com NULL %
000001ea : 23bdfffc;  % 693: 		addi $sp, $sp, -4				# salva $t0 %
000001eb : afa80000;  % 694: 		sw $t0, 0($sp) %
000001ec : 0c0001fe;  % 698: 		jal printChar					# imprime char %
000001ed : 8fa80000;  % 701: 		lw $t0, 0($sp)					# recupera $t0				 %
000001ee : 23bd0004;  % 702: 		addi $sp, $sp, 4 %
000001ef : 20a50008;  % 705: 		addi $a1, $a1, 8				# incrementa a coluna %
000001f0 : 00000000;  % 706: 		nop %
000001f1 : 00000000;  % 707: 		nop %
000001f2 : 28bb0139;  % 708: 		slti $k1,$a1,313   #320-8 %
000001f3 : 00000000;  % 709: 		nop %
000001f4 : 00000000;  % 710: 		nop %
000001f5 : 17600002;  % 711: 		bne $k1,$zero,NaoPulaLinha %
000001f6 : 20c60008;  % 712: 		addi $a2,$a2,8					#incrementa a linha %
000001f7 : 00002821;  % 713: 		move $a1,$zero %
000001f8 : 21080001;  % 720: 		addi $t0,$t0,1 %
000001f9 : 080001e8;  % 721: 		j ForPrintString				# loop %
000001fa : 8fbf0000;  % 723: EndForPrintString: lw $ra, 0($sp)		# recupera $ra %
000001fb : 23bd0004;  % 724: 		addi $sp, $sp, 4 %
000001fc : 00000000;  % 725: 		nop %
000001fd : 03e00008;  % 726: 		jr $ra							# fim printString %
000001fe : 30edff00;  % 750: printChar:	andi $t5,$a3,0xFF00				# cor fundo %
000001ff : 30ee00ff;  % 751: 		andi $t6,$a3,0x00FF				# cor frente %
00000200 : 000d6a02;  % 752: 		srl $t5,$t5,8 %
00000201 : 288c0020;  % 754: 		slti $t4,$a0,32 %
00000202 : 15800003;  % 755: 		bne $t4,$zero, NAOIMPRIMIVEL %
00000203 : 288c007e;  % 756: 		slti $t4,$a0,126 %
00000204 : 11800001;  % 757: 		beq $t4,$zero, NAOIMPRIMIVEL %
00000205 : 08000207;  % 758: 		j IMPRIMIVEL %
00000206 : 24040020;  % 759: NAOIMPRIMIVEL:	li $a0,32 %
00000207 : 24010140;  % 763: IMPRIMIVEL:	li $at, 320 %
00000208 : 00260018;  % 764: 		mult $at, $a2 %
00000209 : 00000000;  % 765: 		nop %
0000020a : 00000000;  % 766: 		nop %
0000020b : 00006012;  % 767: 		mflo $t4 %
0000020c : 00000000;  % 768: 		nop %
0000020d : 00000000;  % 769: 		nop %
0000020e : 01856020;  % 770: 		add $t4, $t4, $a1				# t4 = 256(y) + x %
0000020f : 00000000;  % 771: 		nop %
00000210 : 00000000;  % 772: 		nop %
00000211 : 218c0007;  % 773: 		addi $t4, $t4, 7				# t4 = 256(y) + (x+7) %
00000212 : 3c01ff00;  % 774: 		la $t8, 0xFF000000		# Endereco de inicio da memoria VGA %
00000213 : 34380000;  % 774:  %
00000214 : 00000000;  % 775: 		nop %
00000215 : 00000000;  % 776: 		nop %
00000216 : 01986020;  % 777: 		add $t4, $t4, $t8				# t4 = endereco de impressao do ultimo pixel da primeira linha do char %
00000217 : 208affe0;  % 779: 		addi $t2, $a0, -32				# indice do char na memoria %
00000218 : 00000000;  % 780: 		nop %
00000219 : 00000000;  % 781: 		nop %
0000021a : 000a50c0;  % 782: 		sll $t2, $t2, 3					# offset em bytes em relacao ao endereco inicial %
0000021b : 3c019000;  % 784: 		la $t3,kdata %
0000021c : 342b0000;  % 784:  %
0000021d : 00000000;  % 785: 		nop %
0000021e : 00000000;  % 786: 		nop %
0000021f : 014b5020;  % 787: 		add $t2,$t2,$t3   #pseudo .kdata		 %
00000220 : 00000000;  % 789: 		nop %
00000221 : 00000000;  % 790: 		nop %
00000222 : 8d4b0000;  % 791: 		lw $t3, 0($t2)					# carrega a primeira word do char %
00000223 : 20080004;  % 792: 		addi $t0, $zero, 4				# i = 4 %
00000224 : 00000000;  % 793: 		nop %
00000225 : 00000000;  % 794: 		nop %
00000226 : 11000010;  % 795: forChar1I: beq $t0, $zero, endForChar1I	# if(i == 0) end for i %
00000227 : 20090008;  % 796: 		addi $t1, $zero, 8				# j = 8 %
00000228 : 00000000;  % 797: 		nop %
00000229 : 00000000;  % 798: 		nop %
0000022a : 11200009;  % 800:      forChar1J: beq $t1, $zero, endForChar1J	# if(j == 0) end for j %
0000022b : 31790001;  % 803: 		andi $t9,$t3,0x0001 %
0000022c : 000b5842;  % 804: 		srl $t3, $t3, 1				# t3 = t3/2  ??????????????????? %
0000022d : 13200002;  % 806: 		beq $t9, $zero, printCharPixelbg1 %
0000022e : a18e0000;  % 807: 		sb $t6, 0($t4)		#imprime pixel com cor de frente %
0000022f : 08000231;  % 808: 		j endCharPixel1	 %
00000230 : a18d0000;  % 809: printCharPixelbg1:	sb $t5, 0($t4)  #imprime pixel com cor de fundo %
00000231 : 2129ffff;  % 810: endCharPixel1:  addi $t1, $t1, -1				# j-- %
00000232 : 218cffff;  % 811: 		addi $t4, $t4, -1				# t4 aponta um pixel para a esquerda %
00000233 : 0800022a;  % 812: 		j forChar1J %
00000234 : 2108ffff;  % 814: endForChar1J:  addi $t0, $t0, -1				# i-- %
00000235 : 218c0148;  % 816: 		addi $t4,$t4,328   # 2**12 + 8 %
00000236 : 08000226;  % 817: 		j forChar1I %
00000237 : 8d4b0004;  % 819: endForChar1I: lw $t3, 4($t2)					# carrega a segunda word do char %
00000238 : 20080004;  % 821: 		addi $t0, $zero, 4				# i = 4 %
00000239 : 00000000;  % 822: 		nop %
0000023a : 00000000;  % 823: 		nop %
0000023b : 11000010;  % 824: forChar2I:	 beq $t0, $zero, endForChar2I	# if(i == 0) end for i %
0000023c : 20090008;  % 825: 		addi $t1, $zero, 8				# j = 8 %
0000023d : 00000000;  % 826: 		nop %
0000023e : 00000000;  % 827: 		nop %
0000023f : 11200009;  % 828: 	forChar2J: beq $t1, $zero, endForChar2J	# if(j == 0) end for j %
00000240 : 31790001;  % 831: 			andi $t9,$t3,0x0001 %
00000241 : 000b5842;  % 832: 			srl $t3, $t3, 1					# t3 = t3/2 %
00000242 : 13200002;  % 834: 			beq $t9, $zero, printCharPixelbg2 %
00000243 : a18e0000;  % 835: 			sb $t6, 0($t4) %
00000244 : 08000246;  % 836: 			j endCharPixel2 %
00000245 : a18d0000;  % 838: printCharPixelbg2: sb $t5, 0($t4) %
00000246 : 2129ffff;  % 840:  endCharPixel2:	addi $t1, $t1, -1				# j-- %
00000247 : 218cffff;  % 841: 		addi $t4, $t4, -1				# t4 aponta um pixel para a esquerda %
00000248 : 0800023f;  % 842: 		j forChar2J %
00000249 : 2108ffff;  % 844: 	endForChar2J:	addi $t0, $t0, -1				# i-- %
0000024a : 218c0148;  % 846: 			addi $t4,$t4,328 %
0000024b : 0800023b;  % 847: 		j forChar2I %
0000024c : 03e00008;  % 849: endForChar2I: jr $ra %
0000024d : 24010140;  % 861: Plot: li $at,320   %
0000024e : 00a10018;  % 862: 	mult $a1,$at %
0000024f : 00000000;  % 863: 	nop %
00000250 : 00000000;  % 864: 	nop %
00000251 : 00002812;  % 865: 	mflo $a1 %
00000252 : 00852020;  % 866: 	add $a0,$a0,$a1 %
00000253 : 3c01ff00;  % 867: 	la $a1, 0xFF000000   #endereco VGA %
00000254 : 34250000;  % 867:  %
00000255 : 00000000;  % 868: 	nop %
00000256 : 00000000;  % 869: 	nop %
00000257 : 00852025;  % 870: 	or $a0,$a0,$a1 %
00000258 : a0860000;  % 871: 	sb $a2,0($a0) %
00000259 : 03e00008;  % 872: 	jr $ra %
0000025a : 24010140;  % 883: GetPlot:li $at,320 %
0000025b : 00a10018;  % 884: 	mult $a1,$at %
0000025c : 00000000;  % 885: 	nop %
0000025d : 00000000;  % 886: 	nop %
0000025e : 00002812;  % 887: 	mflo $a1 %
0000025f : 00852020;  % 888: 	add $a0,$a0,$a1 %
00000260 : 3c01ff00;  % 889: 	la $a1, 0xFF000000  #endereco VGA %
00000261 : 34250000;  % 889:  %
00000262 : 00000000;  % 890: 	nop %
00000263 : 00000000;  % 891: 	nop %
00000264 : 00852025;  % 892: 	or $a0,$a0,$a1 %
00000265 : 80860000;  % 893: 	lb $a2,0($a0) %
00000266 : 03e00008;  % 894: 	jr $ra %
00000267 : 3c01ffff;  % 906: readChar: la $t0,0xFFFF0100 %
00000268 : 34280100;  % 906:  %
00000269 : 00000000;  % 907: 	nop %
0000026a : 00000000;  % 908: 	nop %
0000026b : 3c01ffff;  % 911: 	la $t1,0xFFFF0104 %
0000026c : 34290104;  % 911:  %
0000026d : 00000000;  % 912: 	nop %
0000026e : 00000000;  % 913: 	nop %
0000026f : 200f0012;  % 916: 	addi $t7, $zero, 0x12 #carrega o shift %
00000270 : 00000000;  % 917: 	nop %
00000271 : 00000000;  % 918: 	nop %
00000272 : 201800f0;  % 919: 	addi $t8, $zero, 0xF0 #carrega o F0 %
00000273 : 00000000;  % 920: 	nop %
00000274 : 00000000;  % 921: 	nop %
00000275 : 0000c820;  % 922: 	add $t9, $zero, $zero #shif precionado %
00000276 : 8d0e0000;  % 924: 	lw $t6, 0($t0) %
00000277 : 8d0a0000;  % 925: loopReadChar: lw $t2, 0($t0) %
00000278 : 00000000;  % 926: 	nop %
00000279 : 00000000;  % 927: 	nop %
0000027a : 114e0004;  % 928: 	beq $t2, $t6, atualizaBufferChar # testa se o buffer foi modificado %
0000027b : 00000000;  % 929: 	nop %
0000027c : 00000000;  % 930: 	nop %
0000027d : 00000000;  % 931: 	nop %
0000027e : 08000284;  % 932: 	j modificado %
0000027f : 01407020;  % 934: atualizaBufferChar: add $t6, $t2, $zero %
00000280 : 00000000;  % 935: 	nop %
00000281 : 00000000;  % 936: 	nop %
00000282 : 00000000;  % 937: 	nop %
00000283 : 08000277;  % 938: 	j loopReadChar %
00000284 : 314c00ff;  % 940: modificado: andi $t4, $t2, 0xFF %
00000285 : 00000000;  % 941: 	nop %
00000286 : 00000000;  % 942: 	nop %
00000287 : 200d0012;  % 943: 	addi $t5, $zero, 0x12 %
00000288 : 00000000;  % 944: 	nop %
00000289 : 00000000;  % 945: 	nop %
0000028a : 118d003a;  % 946: 	beq $t4, $t5, shiftindahouse %
0000028b : 314c00ff;  % 949: 	andi $t4, $t2, 0xFF %
0000028c : 00000000;  % 950: 	nop %
0000028d : 00000000;  % 951: 	nop %
0000028e : 1198fff0;  % 952: 	beq $t4, $t8, atualizaBufferChar %
0000028f : 314cff00;  % 955: 	andi $t4, $t2, 0xFF00 %
00000290 : 00000000;  % 956: 	nop %
00000291 : 00000000;  % 957: 	nop %
00000292 : 3c010000;  % 958: 	addi $t5, $zero, 0xF000 %
00000293 : 3421f000;  % 958:  %
00000294 : 00016820;  % 958:  %
00000295 : 00000000;  % 959: 	nop %
00000296 : 00000000;  % 960: 	nop %
00000297 : 118d0002;  % 961: 	beq $t4, $t5, continua	#tecla foi solta %
00000298 : 01407020;  % 962: 	add $t6, $t2, $zero %
00000299 : 08000277;  % 963: 	j loopReadChar %
0000029a : 314c00ff;  % 966: continua: andi $t4, $t2, 0xFF #ultima tecla inserida %
0000029b : 00000000;  % 967: 	nop %
0000029c : 00000000;  % 968: 	nop %
0000029d : 118f0027;  % 969: 	beq $t4, $t7, shiftindahouse #se valor é shift %
0000029e : 200d0001;  % 971: 	addi $t5, $zero, 1 %
0000029f : 00000000;  % 972: 	nop %
000002a0 : 00000000;  % 973: 	nop %
000002a1 : 132d0010;  % 974: 	beq $t9, $t5, enderecoShift %
000002a2 : 000c6080;  % 976: 	sll $t4, $t4, 2 #mult 4 %
000002a3 : 3c019000;  % 977: 	la $t5,inicioKdata %
000002a4 : 342d0000;  % 977:  %
000002a5 : 00000000;  % 978: 	nop %
000002a6 : 00000000;  % 979: 	nop %
000002a7 : 018d6020;  % 980: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
000002a8 : 00000000;  % 981: 	nop %
000002a9 : 00000000;  % 982: 	nop %
000002aa : 218c0318;  % 983: 	addi $t4, $t4, 0x318 #final da string para o printChar sem shit %
000002ab : 00000000;  % 984: 	nop %
000002ac : 00000000;  % 985: 	nop %
000002ad : 8d8d0000;  % 986: 	lw $t5, 0($t4) %
000002ae : 00000000;  % 987: 	nop %
000002af : 00000000;  % 988: 	nop %
000002b0 : 11a0ffce;  % 989: 	beq $t5, $zero, atualizaBufferChar %
000002b1 : 080002c7;  % 991: 	j ReadCharEnd %
000002b2 : 314c00ff;  % 993: enderecoShift: andi $t4, $t2, 0xFF #ultima tecla inserida %
000002b3 : 000c6080;  % 995: 	sll $t4, $t4, 2 #mult 4 %
000002b4 : 00000000;  % 996: 	nop %
000002b5 : 00000000;  % 997: 	nop %
000002b6 : 3c019000;  % 998: 	la $t5,inicioKdata %
000002b7 : 342d0000;  % 998:  %
000002b8 : 00000000;  % 999: 	nop %
000002b9 : 00000000;  % 1000: 	nop %
000002ba : 018d6020;  % 1001: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
000002bb : 00000000;  % 1002: 	nop %
000002bc : 00000000;  % 1003: 	nop %
000002bd : 218c0530;  % 1004: 	addi $t4, $t4, 0x530 #final da string para o printChar com shift %
000002be : 00000000;  % 1005: 	nop %
000002bf : 00000000;  % 1006: 	nop %
000002c0 : 8d8d0000;  % 1007: 	lw $t5, 0($t4) %
000002c1 : 00000000;  % 1008: 	nop %
000002c2 : 00000000;  % 1009: 	nop %
000002c3 : 11a0ffbb;  % 1010: 	beq $t5, $zero, atualizaBufferChar %
000002c4 : 080002c7;  % 1012: 	j ReadCharEnd %
000002c5 : 20190001;  % 1014: shiftindahouse: addi, $t9, $zero, 1 %
000002c6 : 0800027f;  % 1015: 	j atualizaBufferChar %
000002c7 : 000d1020;  % 1017: ReadCharEnd: add $v0, $zero, $t5 #coloca em v0 o valor em ascii da tecla %
000002c8 : 03e00008;  % 1018: 	jr $ra %
000002c9 : 20020000;  % 1027: readInt: addi $v0, $zero, 0 %
000002ca : 200f0000;  % 1028: 	addi $t7, $zero, 0 %
000002cb : 3c01ffff;  % 1032: 	la $t0, 0xFFFF0100 %
000002cc : 34280100;  % 1032:  %
000002cd : 00000000;  % 1033: 	nop %
000002ce : 00000000;  % 1034: 	nop %
000002cf : 3c01ffff;  % 1037: 	la $t1, 0xFFFF0104 %
000002d0 : 34290104;  % 1037:  %
000002d1 : 00000000;  % 1038: 	nop %
000002d2 : 00000000;  % 1039: 	nop %
000002d3 : 8d180000;  % 1042: 	lw $t8, 0($t0)	#buffer inicial %
000002d4 : 8d190000;  % 1043: 	lw $t9, 0 ($t0)	#buffer inicial %
000002d5 : 8d0a0000;  % 1045: loopReadInt: lw $t2, 0($t0) %
000002d6 : 00000000;  % 1046: 	nop %
000002d7 : 00000000;  % 1047: 	nop %
000002d8 : 1158003b;  % 1048: 	beq $t2, $t8, atualizaBuffer %
000002d9 : 8d2b0000;  % 1049: 	lw $t3, 0($t1) %
000002da : 314cff00;  % 1053: 	andi $t4, $t2, 0xFF00 %
000002db : 3c010000;  % 1054: 	addi $t5, $zero, 0xF000 %
000002dc : 3421f000;  % 1054:  %
000002dd : 00016820;  % 1054:  %
000002de : 00000000;  % 1055: 	nop %
000002df : 00000000;  % 1056: 	nop %
000002e0 : 118d0001;  % 1057: 	beq $t4, $t5, continuaInt %
000002e1 : 08000314;  % 1058: 	j atualizaBuffer %
000002e2 : 314c00ff;  % 1060: continuaInt: andi $t4, $t2, 0x000000FF %
000002e3 : 200d00f0;  % 1063: 	addi $t5, $zero, 0xF0 %
000002e4 : 00000000;  % 1064: 	nop %
000002e5 : 00000000;  % 1065: 	nop %
000002e6 : 118d002d;  % 1066: 	beq $t4, $t5, atualizaBuffer %
000002e7 : 200d005a;  % 1069: 	addi $t5, $zero, 0x5a %
000002e8 : 00000000;  % 1070: 	nop %
000002e9 : 00000000;  % 1071: 	nop %
000002ea : 118d002c;  % 1072: 	beq $t4, $t5, fimReadInt1 #pressionado o enter %
000002eb : 000c6080;  % 1075: 	sll $t4, $t4, 2 #mult 4 %
000002ec : 3c019000;  % 1076: 	la $t5,inicioKdata %
000002ed : 342d0000;  % 1076:  %
000002ee : 00000000;  % 1077: 	nop %
000002ef : 00000000;  % 1078: 	nop %
000002f0 : 018d6020;  % 1079: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
000002f1 : 218c0318;  % 1080: 	addi $t4, $t4, 0x318 #final da string para o printChar %
000002f2 : 00000000;  % 1081: 	nop %
000002f3 : 00000000;  % 1082: 	nop %
000002f4 : 8d8d0000;  % 1083: 	lw $t5, 0($t4) #posicao na memoria %
000002f5 : 200e002f;  % 1086: 	addi $t6, $zero, 0x2f #inicio dos inteiros - 1 %
000002f6 : 00000000;  % 1087: 	nop %
000002f7 : 00000000;  % 1088: 	nop %
000002f8 : 01cd602a;  % 1089: 	slt $t4, $t6, $t5 %
000002f9 : 1180000f;  % 1090: 	beq $t4, $zero, naoInteiro %
000002fa : 21ce000b;  % 1091: 	addi $t6, $t6, 0xB #final dos inteiros %
000002fb : 00000000;  % 1092: 	nop %
000002fc : 00000000;  % 1093: 	nop %
000002fd : 01ae602a;  % 1094: 	slt $t4, $t5, $t6 %
000002fe : 1180000a;  % 1095: 	beq $t4, $zero, naoInteiro %
000002ff : 31ad000f;  % 1098: 	andi $t5, $t5, 0xF #0x31 = 1, so depende dos bits finais %
00000300 : 200c000a;  % 1099: 	addi $t4, $zero, 10 %
00000301 : 00000000;  % 1100: 	nop %
00000302 : 00000000;  % 1101: 	nop  %
00000303 : 004c0018;  % 1102: 	mult $v0, $t4 #numero vezes 10 (unidade, dezena, centena...) %
00000304 : 00000000;  % 1103: 	nop %
00000305 : 00000000;  % 1104: 	nop %
00000306 : 00001012;  % 1105: 	mflo $v0 %
00000307 : 004d1020;  % 1106: 	add $v0, $v0, $t5 %
00000308 : 08000314;  % 1108: 	j atualizaBuffer %
00000309 : 200c002d;  % 1110: naoInteiro: addi $t4, $zero, 0x2D %
0000030a : 00000000;  % 1111: 	nop %
0000030b : 00000000;  % 1112: 	nop %
0000030c : 118d0001;  % 1113: 	beq $t4, $t5, negativo %
0000030d : 08000314;  % 1115: 	j atualizaBuffer %
0000030e : 0002782a;  % 1117: negativo: slt $t7, $zero, $v0 %
0000030f : 200e0001;  % 1118: 	addi $t6, $zero, 1 %
00000310 : 00000000;  % 1119: 	nop %
00000311 : 00000000;  % 1120: 	nop %
00000312 : 11ee0001;  % 1121: 	beq $t7, $t6, atualizaBuffer %
00000313 : 200f0001;  % 1122: 	addi $t7, $zero, 1 #1 para negativo %
00000314 : 000ac020;  % 1124: atualizaBuffer: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
00000315 : 000bc820;  % 1125: 	add $t9, $zero, $t3	#copia o buffer atual para variavel de buffer anterior %
00000316 : 080002d5;  % 1127: 	j loopReadInt %
00000317 : 11e00001;  % 1129: fimReadInt1: beq $t7, $zero, fimReadInt2 %
00000318 : 00021022;  % 1130: 	sub $v0, $zero, $v0 %
00000319 : 000ac020;  % 1132: fimReadInt2: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
0000031a : 000bc820;  % 1133: 	add $t9, $zero, $t3	#copia o buffer atual para variavel de buffer anterior %
0000031b : 03e00008;  % 1135: 	jr $ra #fim readInt %
0000031c : 00047020;  % 1144: readString: add $t6, $zero, $a0 	#end inicial string %
0000031d : 20010001;  % 1145: 	sub $t7, $a1, 1 	#tamanho maximo menos 1 (guarda para 0x00) %
0000031e : 00a17822;  % 1145:  %
0000031f : 000f7880;  % 1146: 	sll $t7, $t7, 2		#tamanho maximo multiplicado por 4 %
00000320 : 00004820;  % 1147: 	add $t1, $zero, $zero	#contador de caracteres (de 4 em 4) %
00000321 : 0000d021;  % 1148: 	move $k0,$zero	#contador de 4 %
00000322 : 24020000;  % 1149: 	li $v0,0  #flag de ultimo zero %
00000323 : 3c01ffff;  % 1152: 	la $t0,0xFFFF0100 %
00000324 : 34280100;  % 1152:  %
00000325 : 00000000;  % 1153: 	nop %
00000326 : 00000000;  % 1154: 	nop %
00000327 : 8d180000;  % 1156: 	lw $t8, 0($t0)		#buffer1 inicial %
00000328 : 11e9005e;  % 1158: loopReadString: beq $t7, $t1, fimReadString %
00000329 : 8d0a0000;  % 1160: 	lw $t2, 0($t0) %
0000032a : 00000000;  % 1161: 	nop %
0000032b : 00000000;  % 1162: 	nop %
0000032c : 00000000;  % 1163: 	nop %
0000032d : 11580056;  % 1164: 	beq $t2, $t8, atualizaBufferString %
0000032e : 314cff00;  % 1167: 	andi $t4, $t2, 0xFF00 %
0000032f : 3c010000;  % 1168: 	addi $t5, $zero, 0xF000 %
00000330 : 3421f000;  % 1168:  %
00000331 : 00016820;  % 1168:  %
00000332 : 00000000;  % 1169: 	nop %
00000333 : 00000000;  % 1170: 	nop %
00000334 : 118d0001;  % 1171: 	beq $t4, $t5, continuaString %
00000335 : 08000384;  % 1172: 	j atualizaBufferString %
00000336 : 314c00ff;  % 1174: continuaString: andi $t4, $t2, 0x00FF %
00000337 : 200d00f0;  % 1177: 	addi $t5, $zero, 0xF0 %
00000338 : 00000000;  % 1178: 	nop %
00000339 : 00000000;  % 1179: 	nop %
0000033a : 00000000;  % 1180: 	nop %
0000033b : 118d0048;  % 1181: 	beq $t4, $t5, atualizaBufferString %
0000033c : 200d005a;  % 1184: 	addi $t5, $zero, 0x5a %
0000033d : 00000000;  % 1185: 	nop %
0000033e : 00000000;  % 1186: 	nop %
0000033f : 00000000;  % 1187: 	nop %
00000340 : 118d0046;  % 1188: 	beq $t4, $t5, fimReadString #pressionado o enter %
00000341 : 000c6080;  % 1191: 	sll $t4, $t4, 2 	#mult 4 %
00000342 : 3c019000;  % 1193: 	la $t5,inicioKdata %
00000343 : 342d0000;  % 1193:  %
00000344 : 00000000;  % 1194: 	nop %
00000345 : 00000000;  % 1195: 	nop %
00000346 : 018d6020;  % 1196: 	add $t4, $t4, $t5 #inicio endereco na memoria .kdata %
00000347 : 00000000;  % 1197: 	nop %
00000348 : 00000000;  % 1198: 	nop %
00000349 : 218c0318;  % 1199: 	addi $t4, $t4, 0x318 	#final da string para o printChar %
0000034a : 00000000;  % 1200: 	nop %
0000034b : 00000000;  % 1201: 	nop %
0000034c : 00000000;  % 1202: 	nop %
0000034d : 8d8d0000;  % 1203: 	lw $t5, 0($t4) 		#posicao na memoria %
0000034e : 00000000;  % 1204: 	nop %
0000034f : 00000000;  % 1205: 	nop %
00000350 : 00000000;  % 1206: 	nop %
00000351 : 11a00032;  % 1207: 	beq $t5, $zero, atualizaBufferString %
00000352 : 01c96020;  % 1209: VoltaZeroString: add $t4, $t6, $t1 	#endereco para escrita %
00000353 : 00000000;  % 1210: 	nop %
00000354 : 00000000;  % 1211: 	nop %
00000355 : 8d990000;  % 1215: 	lw $t9, 0($t4)	#le o que tem no endereco %
00000356 : 24060000;  % 1217: 	li $a2,0 %
00000357 : 00000000;  % 1218: 	nop %
00000358 : 00000000;  % 1219: 	nop %
00000359 : 13460020;  % 1220: 	beq $k0,$a2,Jzero %
0000035a : 24060001;  % 1221: 	li $a2,1 %
0000035b : 00000000;  % 1222: 	nop %
0000035c : 00000000;  % 1223: 	nop %
0000035d : 13460016;  % 1224: 	beq $k0,$a2,Jum %
0000035e : 00000000;  % 1225: 	nop %
0000035f : 00000000;  % 1226: 	nop %
00000360 : 24060002;  % 1227: 	li $a2,2 %
00000361 : 00000000;  % 1228: 	nop %
00000362 : 00000000;  % 1229: 	nop %
00000363 : 13460008;  % 1230: 	beq $k0,$a2,Jdois %
00000364 : 3c0100ff;  % 1232: Jtres:	la $k1,0x00FFFFFF %
00000365 : 343bffff;  % 1232:  %
00000366 : 00000000;  % 1233: 	nop %
00000367 : 00000000;  % 1234: 	nop %
00000368 : 000d6e00;  % 1237: 	sll $t5,$t5,24 %
00000369 : 241a0000;  % 1238: 	li $k0,0 %
0000036a : 24070004;  % 1239: 	li $a3,4 %
0000036b : 08000380;  % 1240: 	j Jsai %
0000036c : 3c01ff00;  % 1241: Jdois:	la $k1,0xFF00FFFF %
0000036d : 343bffff;  % 1241:  %
0000036e : 00000000;  % 1242: 	nop %
0000036f : 00000000;  % 1243: 	nop %
00000370 : 000d6c00;  % 1246: 	sll $t5,$t5,16 %
00000371 : 241a0003;  % 1247: 	li $k0,3 %
00000372 : 24070000;  % 1248: 	li $a3,0 %
00000373 : 08000380;  % 1249: 	j Jsai %
00000374 : 3c01ffff;  % 1250: Jum:	la $k1,0xFFFF00FF %
00000375 : 343b00ff;  % 1250:  %
00000376 : 000d6a00;  % 1253: 	sll $t5,$t5,8 %
00000377 : 24070000;  % 1254: 	li $a3,0 %
00000378 : 241a0002;  % 1255: 	li $k0,2 %
00000379 : 08000380;  % 1256: 	j Jsai %
0000037a : 241bff00;  % 1257: Jzero: la $k1,0xFFFFFF00 %
0000037b : 00000000;  % 1258: 	nop %
0000037c : 00000000;  % 1259: 	nop %
0000037d : 000d6800;  % 1262: 	sll $t5,$t5,0  %
0000037e : 241a0001;  % 1263: 	li $k0,1 %
0000037f : 24070000;  % 1264: 	li $a3,0 %
00000380 : 033bc824;  % 1266: Jsai:	and $t9,$t9,$k1 %
00000381 : 01b96825;  % 1267: 	or $t5,$t5,$t9 %
00000382 : ad8d0000;  % 1270: PPULA:	sw $t5, 0($t4) 		#guarda char valido %
00000383 : 01274820;  % 1272: 	add $t1, $t1, $a3 	#caractere inserido, atualiza contador %
00000384 : 000ac020;  % 1274: atualizaBufferString: add $t8, $zero, $t2	#copia o buffer atual para variavel de buffer anterior %
00000385 : 1040ffa2;  % 1275: 	beq $v0,$zero,loopReadString %
00000386 : 03e00008;  % 1279: 	jr $ra %
00000387 : 24020001;  % 1282: fimReadString: li $v0,1 #ultimo %
00000388 : 240d0000;  % 1283: 	li $t5,0 #zero %
00000389 : 08000352;  % 1284: 	j VoltaZeroString %
0000038a : 20020000;  % 1296: inKey: addi $v0, $zero, 0 %
0000038b : 20030000;  % 1297: 	addi $v1, $zero, 0 %
0000038c : 3c01ffff;  % 1300: 	la $t0,0xFFFF0100 %
0000038d : 34280100;  % 1300:  %
0000038e : 00000000;  % 1301: 	nop %
0000038f : 00000000;  % 1302: 	nop %
00000390 : 3c01ffff;  % 1305: 	la $t1, 0xFFFF0104 %
00000391 : 34290104;  % 1305:  %
00000392 : 00000000;  % 1306: 	nop %
00000393 : 00000000;  % 1307: 	nop %
00000394 : 8d180000;  % 1310: 	lw $t8, 0($t0)	#buffer inicial %
00000395 : 8d390000;  % 1311: 	lw $t9, 0 ($t1)	#buffer inicial %
00000396 : 8d0a0000;  % 1313: loopInKey: lw $t2, 0($t0) %
00000397 : 8d2b0000;  % 1315: 	lw $t3, 0($t1) %
00000398 : 3c0100ff;  % 1328: 	andi $t4, $t2, 0xFF0000     #pseudo %
00000399 : 34210000;  % 1328:  %
0000039a : 01416024;  % 1328:  %
0000039b : 00000000;  % 1329: 	nop %
0000039c : 00000000;  % 1330: 	nop %
0000039d : 000c6402;  % 1331: 	srl $t4, $t4, 16 %
0000039e : 000c6080;  % 1332: 	sll $t4, $t4, 2 #mult 4 %
0000039f : 3c019000;  % 1333: 	la $t5, inicioKdata %
000003a0 : 342d0000;  % 1333:  %
000003a1 : 00000000;  % 1334: 	nop %
000003a2 : 00000000;  % 1335: 	nop %
000003a3 : 018d6020;  % 1336: 	add $t4, $t4, $t5 #inicio endereco na memoria %
000003a4 : 00000000;  % 1337: 	nop %
000003a5 : 00000000;  % 1338: 	nop %
000003a6 : 218c0318;  % 1339: 	addi $t4, $t4, 0x318 #final da string para o printChar %
000003a7 : 00000000;  % 1340: 	nop %
000003a8 : 00000000;  % 1341: 	nop %
000003a9 : 8d8d0000;  % 1342: 	lw $t5, 0($t4) #posicao na memoria %
000003aa : 000d1020;  % 1343: 	add $v0, $zero, $t5 %
000003ab : 314c00ff;  % 1345: 	andi $t4, $t2, 0xFF %
000003ac : 00000000;  % 1346: 	nop %
000003ad : 00000000;  % 1347: 	nop %
000003ae : 000c6080;  % 1348: 	sll $t4, $t4, 2 #mult 4 %
000003af : 3c019000;  % 1349: 	la $t5, inicioKdata %
000003b0 : 342d0000;  % 1349:  %
000003b1 : 00000000;  % 1350: 	nop %
000003b2 : 00000000;  % 1351: 	nop %
000003b3 : 018d6020;  % 1352: 	add $t4, $t4, $t5 #inicio endereco na memoria %
000003b4 : 00000000;  % 1353: 	nop %
000003b5 : 00000000;  % 1354: 	nop %
000003b6 : 218c0318;  % 1355: 	addi $t4, $t4, 0x318 #final da string para o printChar %
000003b7 : 00000000;  % 1356: 	nop %
000003b8 : 00000000;  % 1357: 	nop %
000003b9 : 8d8d0000;  % 1358: 	lw $t5, 0($t4) #posicao na memoria %
000003ba : 000d1820;  % 1359: 	add $v1, $zero, $t5 %
000003bb : 03e00008;  % 1361: 	jr $ra %
000003bc : 3c01ff00;  % 1370: CLS:	la $t6,0xFF000000  # Memoria VGA %
000003bd : 342e0000;  % 1370:  %
000003be : 00000000;  % 1371: 	nop %
000003bf : 00000000;  % 1372: 	nop %
000003c0 : 3c01ff01;  % 1373: 	la $t2,0xFF012C00 %
000003c1 : 342a2c00;  % 1373:  %
000003c2 : 00000000;  % 1374: 	nop %
000003c3 : 00000000;  % 1375: 	nop %
000003c4 : 114e0004;  % 1376: Fort3:  beq $t2,$t6, Endt3 %
000003c5 : a1c40000;  % 1377: 	sb $a0,0($t6) %
000003c6 : 21ce0001;  % 1378: 	addi $t6, $t6, 1 %
000003c7 : 00000000;  % 1379: 	nop %
000003c8 : 080003c4;  % 1380: 	j Fort3 %
000003c9 : 03e00008;  % 1381: Endt3:  jr $ra %
000003ca : 23bdfff4;  % 1392: popEvent: addi $sp, $sp, -12 %
000003cb : afa40000;  % 1393: 	sw $a0, 0($sp) %
000003cc : afb00004;  % 1394: 	sw $s0, 4($sp) %
000003cd : afbf0008;  % 1395: 	sw $ra, 8($sp) %
000003ce : 3c019000;  % 1398: 	la $s0, eventQueueBeginPtr %
000003cf : 3430079c;  % 1398:  %
000003d0 : 00000000;  % 1399: 	nop %
000003d1 : 00000000;  % 1400: 	nop %
000003d2 : 8e1a0000;  % 1401: 	lw $k0, 0($s0) %
000003d3 : 3c019000;  % 1402: 	la $k1, eventQueueEndPtr %
000003d4 : 343b07a0;  % 1402:  %
000003d5 : 00000000;  % 1403: 	nop %
000003d6 : 00000000;  % 1404: 	nop %
000003d7 : 8f7b0000;  % 1405: 	lw $k1, 0($k1) %
000003d8 : 24020000;  % 1406: 	li $v0, 0 %
000003d9 : 00000000;  % 1407: 	nop %
000003da : 135b0005;  % 1408: 	beq $k0, $k1, popEventEnd %
000003db : 001a2021;  % 1411: 	move $a0, $k0 %
000003dc : 0c0000ba;  % 1412: 	jal eventQueueIncrementPointer %
000003dd : ae020000;  % 1413: 	sw $v0, 0($s0) %
000003de : 24020001;  % 1414: 	li $v0, 1 %
000003df : 8f430000;  % 1415: 	lw $v1, 0($k0) %
000003e0 : 8fbf0008;  % 1417: popEventEnd: lw $ra, 8($sp) %
000003e1 : 8fb00004;  % 1418: 	lw $s0, 4($sp) %
000003e2 : 8fa40000;  % 1419: 	lw $a0, 0($sp) %
000003e3 : 23bd000c;  % 1420: 	addi $sp, $sp, 12 %
000003e4 : 03e00008;  % 1421: 	jr $ra %
000003e5 : 3c017f80;  % 1436: printFloat: li $t0, 0x7F800000 %
000003e6 : 34280000;  % 1436:  %
000003e7 : 00084402;  % 1437: srl $t0, $t0, 16 %
000003e8 : 44096000;  % 1438: mfc1 $t1, $f12 %
000003e9 : 00094c02;  % 1439: srl $t1, $t1, 16 %
000003ea : 01095022;  % 1440: sub $t2, $t0, $t1 %
000003eb : 114000e6;  % 1441: beqz $t2, INFINITYPLUS %
000003ec : 3c01ff80;  % 1443: li $t0, 0xFF800000 %
000003ed : 34280000;  % 1443:  %
000003ee : 00084402;  % 1444: srl $t0, $t0, 16 %
000003ef : 44096000;  % 1445: mfc1 $t1, $f12 %
000003f0 : 00094c02;  % 1446: srl $t1, $t1, 16 %
000003f1 : 01095022;  % 1447: sub $t2, $t0, $t1 %
000003f2 : 114000e8;  % 1448: beqz $t2, INFINITYMINUS %
000003f3 : 44086000;  % 1450: mfc1 $t0, $f12 %
000003f4 : 240900ff;  % 1451: li $t1, 0xFF %
000003f5 : 00094dc0;  % 1452: sll $t1, $t1, 23 %
000003f6 : 01095024;  % 1454: and $t2, $t0, $t1 %
000003f7 : 15400003;  % 1456: bnez $t2, continue %
000003f8 : 24150030;  % 1457: li $s5, 0x00000030 #"0\0" %
000003f9 : aed50000;  % 1458: sw $s5, 0($s6) %
000003fa : 03e00008;  % 1459: jr $ra  ### return printFloat %
000003fb : 23bdfffc;  % 1461: continue: addi $sp, $sp, -4 %
000003fc : afbf0000;  % 1462: sw $ra, 0($sp) %
000003fd : 0c0004ea;  % 1463: jal OBTAIN_MANTISSA_EXP %
000003fe : 8fbf0000;  % 1464: lw $ra, 0($sp) %
000003ff : 23bd0004;  % 1465: addi $sp, $sp, 4 %
00000400 : 20010080;  % 1467: seq $t9, $s2, 128 %
00000401 : 0241c823;  % 1467:  %
00000402 : 34010001;  % 1467:  %
00000403 : 0321c82b;  % 1467:  %
00000404 : 24080001;  % 1469: li $t0, 1 %
00000405 : 12280005;  % 1470: beq $s1, $t0, seNegativo %
00000406 : 3c013649;  % 1472: li $t0, 0x3649539C #3e-6 %
00000407 : 3428539c;  % 1472:  %
00000408 : 44887800;  % 1473: mtc1 $t0, $f15 %
00000409 : 460f5280;  % 1474: sePositivo:add.s $f10, $f10, $f15 %
0000040a : 0800040c;  % 1475: j continue100 %
0000040b : 460f5281;  % 1476: seNegativo: sub.s $f10, $f10, $f15 %
0000040c : 0018c022;  % 1478: continue100: neg $t8,$t8 %
0000040d : 03387024;  % 1479: and $t6, $t9, $t8 %
0000040e : 15c000d5;  % 1480: bnez $t6, NAN %
0000040f : 20010001;  % 1483: seq $t0, $s1, 1 %
00000410 : 02214023;  % 1483:  %
00000411 : 34010001;  % 1483:  %
00000412 : 0101402b;  % 1483:  %
00000413 : 001db821;  % 1484: move $s7, $sp #para recuperar sp depois %
00000414 : 11000003;  % 1485: beqz $t0, CONTINUE1 %
00000415 : 2408002d;  % 1486: addiu $t0, $zero, '-' #Save Signal ASCII %
00000416 : 0100a825;  % 1487: or $s5, $t0, $zero #first byte saved %
00000417 : 0800041a;  % 1488: j CONTINUE2 %
00000418 : 2408002b;  % 1490: CONTINUE1: addiu $t0, $zero, '+' %
00000419 : 0100a825;  % 1491: or $s5, $t0, $zero #first byte saved %
0000041a : 20010001;  % 1496: CONTINUE2: seq $t8, $s1, 1 %
0000041b : 0221c023;  % 1496:  %
0000041c : 34010001;  % 1496:  %
0000041d : 0301c02b;  % 1496:  %
0000041e : 13000004;  % 1497: beqz $t8, normalizaPraCima %
0000041f : 3c01bf80;  % 1498: li $t0, 0xBF800000 # -1 %
00000420 : 34280000;  % 1498:  %
00000421 : 4488c800;  % 1499: mtc1 $t0, $f25 # -1.0 %
00000422 : 46195282;  % 1500: mul.s $f10, $f10, $f25 #turns it positive %
00000423 : 3c013f80;  % 1502: normalizaPraCima: li $t0, 0x3F800000 #1 %
00000424 : 34280000;  % 1502:  %
00000425 : 4488b800;  % 1503: mtc1 $t0, $f23 %
00000426 : 3c014120;  % 1504: li $t0, 0x41200000 #10 %
00000427 : 34280000;  % 1504:  %
00000428 : 4488c000;  % 1505: mtc1 $t0, $f24 %
00000429 : 4617503c;  % 1506: c.lt.s $f10, $f23 #vÃª se mantissa Ã© menor que 1 %
0000042a : 4500000b;  % 1507: bc1f NOTZERO %
0000042b : 460ac282;  % 1508: mul.s $f10, $f24, $f10 %
0000042c : 2294ffff;  % 1509: addi $s4, $s4, -1 #decrementa o expoente por 1 %
0000042d : 08000423;  % 1510: j normalizaPraCima %
0000042e : 3c014120;  % 1512: normalizaPraBaixo: li $t0, 0x41200000 #10 %
0000042f : 34280000;  % 1512:  %
00000430 : 4488c000;  % 1513: mtc1 $t0, $f24 %
00000431 : 4618503c;  % 1514: c.lt.s $f10, $f24 #vÃª se mantissa Ã© menor que 1 %
00000432 : 45010003;  % 1515: bc1t NOTZERO %
00000433 : 46185283;  % 1516: div.s $f10, $f10, $f24 %
00000434 : 22940001;  % 1517: addi $s4, $s4, +1 #decrementa o expoente por 1 %
00000435 : 0800042e;  % 1518: j normalizaPraBaixo %
00000436 : 3c014120;  % 1520: NOTZERO: li $t0, 0x41200000 #10 %
00000437 : 34280000;  % 1520:  %
00000438 : 44887000;  % 1521: mtc1 $t0, $f14 %
00000439 : 460e503c;  % 1522: c.lt.s $f10, $f14 %
0000043a : 45010002;  % 1523: bc1t CONTINUE3 %
0000043b : 460e5283;  % 1524: div.s $f10, $f10, $f14 #dividir por 10, pois f10 era maior que 10 %
0000043c : 26940001;  % 1525: addiu $s4, $s4, 1 # adicionar 1 ao expoente na base 10 depois desta divisao %
0000043d : 46005024;  % 1527: CONTINUE3: cvt.w.s $f0, $f10 %
0000043e : 44080000;  % 1528: mfc1 $t0, $f0 %
0000043f : 46800660;  % 1529: cvt.s.w $f25, $f0 %
00000440 : 460ac83e;  % 1530: c.le.s $f25, $f10 %
00000441 : 45010001;  % 1531: bc1t a1 %
00000442 : 2108ffff;  % 1532: addi $t0, $t0, -1 %
00000443 : 21080030;  % 1533: a1: addi $t0, $t0, '0' #Inicio dos caracteres de numeros, 48 = '0' %
00000444 : 00084200;  % 1534: sll $t0, $t0, 8 %
00000445 : 02a8a825;  % 1536: or $s5, $s5, $t0 # second byte saved %
00000446 : 00084202;  % 1537: srl $t0, $t0, 8 %
00000447 : 2409002e;  % 1539: li $t1, '.' # o ponto!! %
00000448 : 00094c00;  % 1540: sll $t1, $t1, 16 %
00000449 : 02a9a825;  % 1541: or $s5, $s5, $t1 # third byte save %
0000044a : 00094c02;  % 1542: srl $t1, $t1, 16 %
0000044b : 20010030;  % 1544: sub $t0, $t0, '0' %
0000044c : 01014022;  % 1544:  %
0000044d : 44888800;  % 1545: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000044e : 46808c60;  % 1546: cvt.s.w $f17, $f17 #torna valor em float %
0000044f : 46115281;  % 1547: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o numero como 0.ABCDEF %
00000450 : 460e5282;  % 1548: mul.s $f10, $f10, $f14 # numero fica A.BCDEFX %
00000451 : 46005024;  % 1550: cvt.w.s $f0, $f10 %
00000452 : 44080000;  % 1551: mfc1 $t0, $f0 # Salva A em t0 %
00000453 : 46800660;  % 1552: cvt.s.w $f25, $f0 %
00000454 : 460ac83e;  % 1553: c.le.s $f25, $f10 %
00000455 : 45010001;  % 1554: bc1t a2 %
00000456 : 2108ffff;  % 1555: addi $t0, $t0, -1 %
00000457 : 21080030;  % 1556: a2: addi $t0, $t0, '0' %
00000458 : 00084600;  % 1557: sll $t0, $t0, 24 %
00000459 : 02a8a825;  % 1558: or $s5, $s5, $t0 # fourth byte save %
0000045a : 00084602;  % 1559: srl $t0, $t0, 24 %
0000045b : aed50000;  % 1560: sw $s5, 0($s6) #four bytes group saved %
0000045c : 20010030;  % 1562: sub $t0, $t0, '0' %
0000045d : 01014022;  % 1562:  %
0000045e : 44888800;  % 1563: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000045f : 46808c60;  % 1564: cvt.s.w $f17, $f17 #torna valor em float %
00000460 : 46115281;  % 1565: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o numero como 0.BCDEFX %
00000461 : 460e5282;  % 1566: mul.s $f10, $f10, $f14 # numero fica B.CDEFXX %
00000462 : 46005024;  % 1568: cvt.w.s $f0, $f10 %
00000463 : 44080000;  % 1569: mfc1 $t0, $f0 # Salva B em t0 %
00000464 : 46800660;  % 1570: cvt.s.w $f25, $f0 %
00000465 : 460ac83e;  % 1571: c.le.s $f25, $f10 %
00000466 : 45010001;  % 1572: bc1t a3 %
00000467 : 2108ffff;  % 1573: addi $t0, $t0, -1 %
00000468 : 21080030;  % 1574: a3: addi $t0, $t0, '0' %
00000469 : 0100a825;  % 1575: or $s5, $t0, $zero # first byte saved %
0000046a : 20010030;  % 1577: sub $t0, $t0, '0' %
0000046b : 01014022;  % 1577:  %
0000046c : 44888800;  % 1578: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000046d : 46808c60;  % 1579: cvt.s.w $f17, $f17 #torna valor em float %
0000046e : 46115281;  % 1580: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o numero como 0.CDEFXX %
0000046f : 460e5282;  % 1581: mul.s $f10, $f10, $f14 # numero fica C.DEFXXX %
00000470 : 46005024;  % 1584: cvt.w.s $f0, $f10 %
00000471 : 44080000;  % 1585: mfc1 $t0, $f0 # Salva C em t0 %
00000472 : 46800660;  % 1586: cvt.s.w $f25, $f0 %
00000473 : 460ac83e;  % 1587: c.le.s $f25, $f10 %
00000474 : 45010001;  % 1588: bc1t a4 %
00000475 : 2108ffff;  % 1589: addi $t0, $t0, -1 %
00000476 : 21080030;  % 1590: a4: addi $t0, $t0, '0' %
00000477 : 00084200;  % 1591: sll $t0, $t0, 8 %
00000478 : 02a8a825;  % 1592: or $s5, $s5, $t0 # second byte saved %
00000479 : 00084202;  % 1593: srl $t0, $t0, 8 %
0000047a : 20010030;  % 1595: sub $t0, $t0, '0' %
0000047b : 01014022;  % 1595:  %
0000047c : 44888800;  % 1596: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000047d : 46808c60;  % 1597: cvt.s.w $f17, $f17 #torna valor em float %
0000047e : 46115281;  % 1598: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o numero como 0.DEFXXX %
0000047f : 460e5282;  % 1599: mul.s $f10, $f10, $f14 # numero fica D.EFXXXX %
00000480 : 46005024;  % 1601: cvt.w.s $f0, $f10 %
00000481 : 44080000;  % 1602: mfc1 $t0, $f0 # Salva D em t0 %
00000482 : 46800660;  % 1603: cvt.s.w $f25, $f0 %
00000483 : 460ac83e;  % 1604: c.le.s $f25, $f10 %
00000484 : 45010001;  % 1605: bc1t a5 %
00000485 : 2108ffff;  % 1606: addi $t0, $t0, -1 %
00000486 : 21080030;  % 1607: a5: addi $t0, $t0, '0' %
00000487 : 00084400;  % 1608: sll $t0, $t0, 16 %
00000488 : 02a8a825;  % 1609: or $s5, $s5, $t0 # third byte saved %
00000489 : 00084402;  % 1610: srl $t0, $t0, 16 %
0000048a : 20010030;  % 1612: sub $t0, $t0, '0' %
0000048b : 01014022;  % 1612:  %
0000048c : 44888800;  % 1613: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000048d : 46808c60;  % 1614: cvt.s.w $f17, $f17 #torna valor em float %
0000048e : 46115281;  % 1615: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o numero como 0.EFXXXX %
0000048f : 460e5282;  % 1616: mul.s $f10, $f10, $f14 # numero fica E.FXXXX %
00000490 : 46005024;  % 1618: cvt.w.s $f0, $f10 %
00000491 : 44080000;  % 1619: mfc1 $t0, $f0 # Salva E em t0 %
00000492 : 46800660;  % 1620: cvt.s.w $f25, $f0 %
00000493 : 460ac83e;  % 1621: c.le.s $f25, $f10 %
00000494 : 45010001;  % 1622: bc1t a6 %
00000495 : 2108ffff;  % 1623: addi $t0, $t0, -1 %
00000496 : 21080030;  % 1624: a6: addi $t0, $t0, '0' %
00000497 : 00084600;  % 1625: sll $t0, $t0, 24 %
00000498 : 02a8a825;  % 1626: or $s5, $s5, $t0 # fourth byte saved %
00000499 : 00084602;  % 1627: srl $t0, $t0, 24 %
0000049a : aed50004;  % 1628: sw $s5, 4($s6) #more four bytes saved %
0000049b : 20010030;  % 1630: sub $t0, $t0, '0' %
0000049c : 01014022;  % 1630:  %
0000049d : 44888800;  % 1631: mtc1 $t0, $f17 # Pega valor truncado do coprocessador 1 %
0000049e : 46808c60;  % 1632: cvt.s.w $f17, $f17 #torna valor em float %
0000049f : 46115281;  % 1633: sub.s $f10, $f10, $f17 # Subtrai do valor da mantissa, deixando o nÃÂºmero como 0.FXXXXX %
000004a0 : 460e5282;  % 1634: mul.s $f10, $f10, $f14 # numero fica F.XXXXX %
000004a1 : 46005024;  % 1636: cvt.w.s $f0, $f10 %
000004a2 : 44080000;  % 1637: mfc1 $t0, $f0 # Salva F em t0 %
000004a3 : 46800660;  % 1638: cvt.s.w $f25, $f0 %
000004a4 : 460ac83e;  % 1639: c.le.s $f25, $f10 %
000004a5 : 45010001;  % 1640: bc1t a7 %
000004a6 : 2108ffff;  % 1641: addi $t0, $t0, -1 %
000004a7 : 21080030;  % 1642: a7: addi $t0, $t0, '0' %
000004a8 : 0100a825;  % 1643: or $s5, $t0, $zero %
000004a9 : 24080045;  % 1646: OUT_LOOP_DEPOIS_DA_VIRGULA: li $t0, 'E' %
000004aa : 00084200;  % 1647: sll $t0, $t0, 8 %
000004ab : 02a8a825;  % 1648: or $s5, $s5, $t0 # second byte saved %
000004ac : 00084202;  % 1649: srl $t0, $t0, 8 %
000004ad : 001dc021;  % 1651: move $t8, $sp %
000004ae : 23180009;  % 1652: addi $t8, $t8, 9 %
000004af : 2409000a;  % 1653: li $t1, 10 %
000004b0 : 0014c82a;  % 1654: sgt $t9, $s4, $0 #O expoente e maior que 0? Se sim, t9 = 1 %
000004b1 : 17200005;  % 1655: bnez $t9, EXPOENTE_CHAR1 %
000004b2 : 2409002d;  % 1656: li $t1, '-' %
000004b3 : 00094c00;  % 1657: sll $t1, $t1, 16 %
000004b4 : 02a9a825;  % 1658: or $s5, $s5, $t1 # third byte saved %
000004b5 : 00094c02;  % 1659: srl $t1, $t1, 16 %
000004b6 : 080004bb;  % 1661: j EXPOENTE_CHAR %
000004b7 : 2409002b;  % 1663: EXPOENTE_CHAR1: li $t1, '+' %
000004b8 : 00094c00;  % 1664: sll $t1, $t1, 16 %
000004b9 : 02a9a825;  % 1665: or $s5, $s5, $t1 # third byte saved %
000004ba : 00094c02;  % 1666: srl $t1, $t1, 16 %
000004bb : 2409000a;  % 1668: EXPOENTE_CHAR: li $t1, 10 %
000004bc : 2a8d0000;  % 1669: slti $t5, $s4, 0 %
000004bd : 11a00002;  % 1670: beqz $t5, EXPONENT %
000004be : 0280a027;  % 1671: not $s4, $s4 %
000004bf : 22940001;  % 1672: addi $s4, $s4, 1 %
000004c0 : 0289001a;  % 1674: EXPONENT: div $s4, $t1 %
000004c1 : 00004012;  % 1675: mflo $t0 # exp10 / 10 %
000004c2 : 25080030;  % 1678: addiu $t0, $t0, '0' %
000004c3 : 00084600;  % 1679: sll $t0, $t0, 24 %
000004c4 : 02a8a825;  % 1680: or $s5, $s5, $t0 # fourth byte saved %
000004c5 : 00084602;  % 1681: srl $t0, $t0, 24 %
000004c6 : aed50008;  % 1682: sw $s5, 8($s6) %
000004c7 : 00004010;  % 1684: mfhi $t0 %
000004c8 : 25080030;  % 1690: addiu $t0, $t0, '0' %
000004c9 : 0100a825;  % 1691: or $s5, $t0, $zero # first byte saved %
000004ca : 2408000a;  % 1693: li $t0, '\n' %
000004cb : 00084200;  % 1694: sll $t0, $t0, 8 %
000004cc : 02a8a825;  % 1695: or $s5, $s5, $t0 # second byte saved %
000004cd : 24080000;  % 1697: li $t0, '\0' %
000004ce : 00084400;  % 1698: sll $t0, $t0, 16 %
000004cf : 02a8a825;  % 1699: or $s5, $s5, $t0 # third byte saved %
000004d0 : aed5000c;  % 1700: sw $s5, 12($s6) %
000004d1 : 080004e9;  % 1702: j endPrintFloat %
000004d2 : 3c01666e;  % 1704: INFINITYPLUS: li $s5, 0x666E4920 #" Inf" %
000004d3 : 34354920;  % 1704:  %
000004d4 : aed50000;  % 1705: sw $s5, 0($s6) %
000004d5 : 3c017469;  % 1706: li $s5, 0x74696E69 #"init" %
000004d6 : 34356e69;  % 1706:  %
000004d7 : aed50004;  % 1707: sw $s5, 4($s6) %
000004d8 : 24150079;  % 1708: li $s5, 0x00000079 #"y\0" %
000004d9 : aed50008;  % 1709: sw $s5, 8($s6) %
000004da : 03e00008;  % 1711: jr $ra %
000004db : 3c01666e;  % 1713: INFINITYMINUS: li $s5, 0x666E492D #" Inf" %
000004dc : 3435492d;  % 1713:  %
000004dd : aed50000;  % 1714: sw $s5, 0($s6) %
000004de : 3c017469;  % 1715: li $s5, 0x74696E69 #"init" %
000004df : 34356e69;  % 1715:  %
000004e0 : aed50004;  % 1716: sw $s5, 4($s6) %
000004e1 : 24150079;  % 1717: li $s5, 0x00000079 #"y\0" %
000004e2 : aed50008;  % 1718: sw $s5, 8($s6) %
000004e3 : 03e00008;  % 1720: jr $ra %
000004e4 : 3c01004e;  % 1722: NAN: li $s5, 0x004E614E #"\NaN\0" %
000004e5 : 3435614e;  % 1722:  %
000004e6 : aed50000;  % 1723: sw $s5, 0($s6) %
000004e7 : 03e00008;  % 1724: jr $ra %
000004e8 : 080004e9;  % 1726: j endPrintFloat %
000004e9 : 03e00008;  % 1727: endPrintFloat: jr $ra %
000004ea : 44106000;  % 1733: OBTAIN_MANTISSA_EXP: mfc1 $s0, $f12 #Take number in IEEE 754 %
000004eb : 00108fc2;  % 1736: srl $s1, $s0, 31 # t1 = sign %
000004ec : 001095c2;  % 1739: srl $s2, $s0, 23 %
000004ed : 325200ff;  % 1740: andi $s2, $s2, 0xFF %
000004ee : 2252ff81;  % 1741: addi $s2, $s2, -127 %
000004ef : 24080001;  % 1746: li $t0, 1 %
000004f0 : 000845c0;  % 1747: sll $t0, $t0, 23 %
000004f1 : 2108ffff;  % 1748: addi $t0, $t0, -1 # t0 = (1<<23) - 1 %
000004f2 : 01109824;  % 1749: and $s3, $t0, $s0 # man = x & ((1<<23) - 1) %
000004f3 : 21080001;  % 1751: addi $t0, $t0, 1 %
000004f4 : 01139825;  % 1752: or $s3, $t0, $s3 # man |= (1 << 23) %
000004f5 : 2248007f;  % 1755: addi $t0, $s2, 127 %
000004f6 : 000845c0;  % 1756: sll  $t0, $t0, 23 %
000004f7 : 02084822;  % 1757: sub  $t1, $s0, $t0 # x - ((exp+127) << 23) %
000004f8 : 2408007f;  % 1759: li $t0, 0x7f %
000004f9 : 000845c0;  % 1760: sll $t0, $t0, 23 %
000004fa : 01284825;  % 1761: or $t1, $t1, $t0 # s4 |= 0x7f << 23 %
000004fb : 44895000;  % 1762: mtc1 $t1, $f10 # mantissa sem expoente incompleta = f10 %
000004fc : 4492f000;  % 1767: mtc1 $s2, $f30 %
000004fd : 4680f7a0;  % 1768: cvt.s.w $f30, $f30 # float(exponent) %
000004fe : 3c013f31;  % 1769: li $t0, 0x3F317218 #ln(2) %
000004ff : 34287218;  % 1769:  %
00000500 : 44880800;  % 1770: mtc1 $t0, $f1 #ln(2) %
00000501 : 44921000;  % 1771: mtc1 $s2, $f2 #take exponent %
00000502 : 468010a0;  % 1772: cvt.s.w $f2, $f2 # Convert to single precision %
00000503 : 46011082;  % 1773: mul.s $f2, $f2, $f1 # f2 = n ln(2) %
00000504 : 3c013e9a;  % 1776: li $t0, 0x3E9A209B #log(2) %
00000505 : 3428209b;  % 1776:  %
00000506 : 44880800;  % 1777: mtc1 $t0, $f1 %
00000507 : 44921000;  % 1779: mtc1 $s2, $f2 #take exponent %
00000508 : 468010a0;  % 1780: cvt.s.w $f2, $f2 # Convert to single precision %
00000509 : 46020882;  % 1781: mul.s $f2, $f1, $f2 # f %
0000050a : 3c01bf80;  % 1782: li $t0, 0xBF800000 #-1 %
0000050b : 34280000;  % 1782:  %
0000050c : 44882800;  % 1783: mtc1 $t0, $f5 # -1 %
0000050d : 4480b800;  % 1786: mtc1 $zero,$f23 # lwc1 $f23, 0x0 %
0000050e : 4617103c;  % 1787: c.lt.s $f2, $f23 #checa se f < 0 %
0000050f : 46001106;  % 1788: mov.s $f4, $f2  %
00000510 : 45010004;  % 1790: bc1t menorQueZero %
00000511 : 3c01bf80;  % 1791: li $t0, 0xBF800000 %
00000512 : 34280000;  % 1791:  %
00000513 : 46002124;  % 1792: maiorQueZero: cvt.w.s $f4, $f4 # se x > 0, ceil(f) = trunca(x) %
00000514 : 0800051a;  % 1793: 	j salvaFloor %
00000515 : 3c01bf79;  % 1795: menorQueZero: li $t0, 0xBF79999A # se x < 0, floor(f) = trunca(x-0.975) %
00000516 : 3428999a;  % 1795:  %
00000517 : 4488b800;  % 1796: 	mtc1 $t0, $f23 #f23 = 0.975 %
00000518 : 46172100;  % 1797: 	add.s $f4, $f4, $f23 %
00000519 : 46002124;  % 1798: 	cvt.w.s $f4, $f4 %
0000051a : 44142000;  % 1800: salvaFloor: mfc1 $s4, $f4 # save ceil(f) %
0000051b : 46802120;  % 1801: cvt.s.w $f4, $f4 %
0000051c : 3c014013;  % 1804: li $t0, 0x40135D8E # ln(10) %
0000051d : 34285d8e;  % 1804:  %
0000051e : 44880800;  % 1805: mtc1 $t0, $f1 %
0000051f : 46012102;  % 1807: mul.s $f4, $f4, $f1 # floor(f)*ln(10) %
00000520 : 3c013f31;  % 1809: li $t0, 0x3F317218 #ln(2) %
00000521 : 34287218;  % 1809:  %
00000522 : 44880800;  % 1810: mtc1 $t0, $f1 # ln(2) %
00000523 : 44921000;  % 1811: mtc1 $s2, $f2 #take exponent %
00000524 : 468010a0;  % 1812: cvt.s.w $f2, $f2 # Convert to single precision %
00000525 : 460110c2;  % 1813: mul.s $f3, $f2, $f1 # n ln(2) %
00000526 : 46041f81;  % 1814: sub.s $f30, $f3, $f4 # f30 = n ln(2) - floor(f)*ln(10) %
00000527 : 001fb821;  % 1818: move $s7, $ra %
00000528 : 0c00052c;  % 1819: jal EXP # 2 ^ exp2 / 10 ^ exp10 %
00000529 : 0017f821;  % 1820: move $ra, $s7 %
0000052a : 460afa82;  % 1821: mul.s $f10, $f31, $f10 #f10 = MANTISSA NA BASE 10 %
0000052b : 03e00008;  % 1823: END_OBTAIN_MANTISSA: jr $ra %
0000052c : 2409001e;  % 1828: EXP: li $t1, 30 %
0000052d : 44800800;  % 1830: mtc1 $zero,$f1  # lwc1 $f1, 0x0#f1 = 0 %
0000052e : 4600f086;  % 1831: mov.s $f2, $f30 #f2 = x %
0000052f : 3c013f80;  % 1832: li $t0, 0x3F800000 # 1 %
00000530 : 34280000;  % 1832:  %
00000531 : 4488f800;  % 1833: mtc1 $t0, $f31 # 1.0 %
00000532 : 461effc0;  % 1835: add.s $f31, $f31, $f30 #exp($f30) = 1 + x %
00000533 : 00004021;  % 1836: move $t0, $zero #index = 0 %
00000534 : 21080001;  % 1837: addi $t0, $t0, 1 #index = 1 %
00000535 : 44882800;  % 1838: mtc1 $t0, $f5 #f5 = t0 %
00000536 : 46802960;  % 1839: cvt.s.w $f5, $f5 #f5 = float(t0) = factorial(index) %
00000537 : 21080001;  % 1842: FOR: addi $t0, $t0, 1 # i = i + 1 %
00000538 : 44881800;  % 1843: mtc1 $t0, $f3 # f2 = index %
00000539 : 468018e0;  % 1844: cvt.s.w $f3, $f3 # f3 = float(index) %
0000053a : 46032942;  % 1847: mul.s $f5, $f5, $f3 #factorial(index) %
0000053b : 461e1082;  % 1851: mul.s $f2, $f2, $f30 # f2 = x^n %
0000053c : 46051103;  % 1852: div.s $f4, $f2, $f5 # f4 = x^n / factorial(index) %
0000053d : 4604ffc0;  % 1856: add.s $f31, $f31, $f4 %
0000053e : 0128502a;  % 1860: sle $t2, $t0, $t1 %
0000053f : 34010001;  % 1860:  %
00000540 : 002a5023;  % 1860:  %
00000541 : 11400001;  % 1861: beqz $t2, END %
00000542 : 08000537;  % 1862: j FOR %
00000543 : 03e00008;  % 1864: END: jr $ra %
00000544 : 3c019000;  % 1872: readFloat: la $a0, FloatBuffer  # buffer caracteres %
00000545 : 3424076c;  % 1872:  %
00000546 : 24050020;  % 1873: 	li $a1,32  #numero maximo de digitos %
00000547 : 24020008;  % 1874: 	li $v0,8             # read string %
00000548 : 0c00031c;  % 1875: 	jal readString        #syscall %
00000549 : 00048821;  % 1877: 	move $s1, $a0	 %
0000054a : 00009821;  % 1879: 	move $s3, $0		# $s3 = contador de caracteres na parte fracionaria %
0000054b : 0000a021;  % 1880: 	move $s4, $0		# $s4 = flag para sinal do numero %
0000054c : 240c0000;  % 1881: 	li $t4, 0		# $t4 = total inteiro (int) %
0000054d : 240d0000;  % 1882: 	li $t5, 0		# $t5 = total float %
0000054e : 2409000a;  % 1883: 	li $t1, 10		# $t1 = valor a ser dividido %
0000054f : 44893800;  % 1884: 	mtc1 $t1, $f7		# convertendo ele para float %
00000550 : 468039e0;  % 1885: 	cvt.s.w $f7, $f7 %
00000551 : 44800000;  % 1886: 	mtc1 $0, $f0		# zerando o registrador $f0 que eh o resultado final %
00000552 : 24080000;  % 1888: 	li $t0, 0x0		#vou salvando os valores parciais aqui %
00000553 : 44880800;  % 1889: 	mtc1 $t0, $f1 %
00000554 : 3c014120;  % 1891: 	li $t0, 0x41200000 	#valor 10 fixo %
00000555 : 34280000;  % 1891:  %
00000556 : 44881000;  % 1892: 	mtc1 $t0, $f2 %
00000557 : 3c014120;  % 1894: 	li $t0, 0x41200000 	#multiplos de 10 %
00000558 : 34280000;  % 1894:  %
00000559 : 44881800;  % 1895: 	mtc1 $t0, $f3 %
0000055a : 24080000;  % 1897: 	li $t0, 0x0		#vou salvando os valores parciais aqui %
0000055b : 44886800;  % 1898: 	mtc1 $t0, $f13 %
0000055c : 0011c821;  % 1901: 	move $t9, $s1 %
0000055d : 001fc021;  % 1902: 	move $t8, $ra %
0000055e : 0c00061e;  % 1903: 	jal loadbytet0 %
0000055f : 0018f821;  % 1904: 	move $ra, $t8 %
00000560 : 2001002b;  % 1905: 	beq $t0, '+', floop1 %
00000561 : 10280003;  % 1905:  %
00000562 : 2001002d;  % 1906: 	bne $t0, '-', floopE	# '-' = 45 Se for negativo prossegue, se nao ir para loop1 %
00000563 : 14280002;  % 1906:  %
00000564 : 24140001;  % 1907: 	li $s4, 1		# $s4 sinalizado 1 como negativo %
00000565 : 22310001;  % 1908: floop1:	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
00000566 : 0011b821;  % 1910: floopE:	move $s7, $s1 %
00000567 : 0017c821;  % 1911: floop2:	move $t9, $s7 %
00000568 : 001fc021;  % 1912: 	move $t8, $ra %
00000569 : 0c00061e;  % 1913: 	jal loadbytet0 %
0000056a : 0018f821;  % 1914: 	move $ra, $t8 %
0000056b : 20010000;  % 1915: 	beq $t0, 0, floop3	#'\0' = 0 quando elemento atual da pilha for 0 pule para loop1 %
0000056c : 1028000b;  % 1915:  %
0000056d : 2001002e;  % 1916: 	beq $t0, 46, floop3	# '.' = 46 quanto elemento atual da pilha for . ou seja acabou os numeros inteiros va para loop1 %
0000056e : 10280009;  % 1916:  %
0000056f : 2001000a;  % 1917: 	beq $t0, 10, floop3 %
00000570 : 10280007;  % 1917:  %
00000571 : 20010045;  % 1918: 	beq $t0, 'E', floop3 %
00000572 : 10280005;  % 1918:  %
00000573 : 20010065;  % 1919: 	beq $t0, 'e', floop3 %
00000574 : 10280003;  % 1919:  %
00000575 : 2108ffd0;  % 1920: 	addi $t0, $t0, -48	# subtrai-se 48 para encontrar o numero inteiro de 0 a 9 segundo a tabela ascii %
00000576 : 26f70001;  % 1931: isNum:	addiu $s7, $s7, 1 %
00000577 : 08000567;  % 1932: 	j floop2 %
00000578 : 02f14022;  % 1934: floop3:	sub $t0, $s7, $s1 #numero total de casas decimais da parte inteira %
00000579 : 2108ffff;  % 1935: 	addi $t0, $t0, -1 %
0000057a : 00087821;  % 1936: 	move $t7, $t0 %
0000057b : 24120000;  % 1937: 	li $s2, 0 #make sure doesn't use part of E algorithm %
0000057c : 001fc021;  % 1938: 	move $t8, $ra %
0000057d : 0c0005fe;  % 1939: 	jal n10 # 10**n is salved in f31 after this %
0000057e : 0018f821;  % 1940: 	move $ra, $t8 %
0000057f : 4600f946;  % 1941: 	mov.s $f5, $f31 %
00000580 : 0011c821;  % 1946: 	move $t9, $s1 %
00000581 : 001fc021;  % 1947: 	move $t8, $ra %
00000582 : 0c00061e;  % 1948: 	jal loadbytet0 %
00000583 : 0018f821;  % 1949: 	move $ra, $t8 %
00000584 : 20010000;  % 1950: 	beq $t0, 0, final	#'\0' = 0 quando elemento atual da pilha for 0 pule para end1p1 %
00000585 : 10280063;  % 1950:  %
00000586 : 2001002e;  % 1951: 	beq $t0, 46, endlp2	# '.' = 46 quanto elemento atual da pilha for . ou seja acabou os numeros inteiros va para end1p2 %
00000587 : 1028000e;  % 1951:  %
00000588 : 2001000a;  % 1952: 	beq $t0, 10, final	# \n %
00000589 : 1028005f;  % 1952:  %
0000058a : 20010045;  % 1953: 	beq $t0, 'E', stepE1 %
0000058b : 10280026;  % 1953:  %
0000058c : 20010065;  % 1954: 	beq $t0, 'e', stepE1 %
0000058d : 10280024;  % 1954:  %
0000058e : 2108ffd0;  % 1955: 	addi $t0, $t0, -48	# subtrai-se 48 para encontrar o numero inteiro de 0 a 9 segundo a tabela ascii %
0000058f : 44883800;  % 1957: 	mtc1 $t0, $f7		#passes read number from stack to c1 %
00000590 : 468039e0;  % 1958: 	cvt.s.w $f7, $f7	#converts it to floating point number %
00000591 : 460728c2;  % 1959: 	mul.s $f3, $f5, $f7 	#contains 10**n * (char) %
00000592 : 46022943;  % 1960: 	div.s $f5, $f5, $f2 	#makes 10**(n-1) %
00000593 : 46030840;  % 1961: 	add.s $f1, $f1, $f3 	#adding, adding... %
00000594 : 22310001;  % 1963: 	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
00000595 : 08000580;  % 1965: 	j loop1			# pula para loop1 %
00000596 : 22310001;  % 1968: endlp2:	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
00000597 : 3c014120;  % 1970: 	li $t0, 0x41200000 %
00000598 : 34280000;  % 1970:  %
00000599 : 44882800;  % 1971: 	mtc1 $t0, $f5 %
0000059a : 3c013f80;  % 1972: 	li $t0, 0x3F800000 %
0000059b : 34280000;  % 1972:  %
0000059c : 44881800;  % 1973: 	mtc1 $t0, $f3 %
0000059d : 0011c821;  % 1975: loop2:	move $t9, $s1 %
0000059e : 001fc021;  % 1976: 	move $t8, $ra %
0000059f : 0c00061e;  % 1977: 	jal loadbytet0 %
000005a0 : 0018f821;  % 1978: 	move $ra, $t8		# le $t0 %
000005a1 : 20010065;  % 1979: 	beq $t0, 'e', stepE1	#'\0' = 0 quando elemento atual da pilha for 0 pule para end1p1 %
000005a2 : 1028000f;  % 1979:  %
000005a3 : 20010045;  % 1980: 	beq $t0, 'E', stepE1 %
000005a4 : 1028000d;  % 1980:  %
000005a5 : 20010000;  % 1981: 	beq $t0, '\0', final %
000005a6 : 10280042;  % 1981:  %
000005a7 : 2001000a;  % 1982: 	beq $t0, '\n', final %
000005a8 : 10280040;  % 1982:  %
000005a9 : 2108ffd0;  % 1983: 	addi $t0, $t0, -48	# subtrai-se 48 para encontrar o numero inteiro de 0 a 9 segundo a tabela ascii %
000005aa : 460310c2;  % 1985: 	mul.s $f3, $f2, $f3 #multiples of 10 %
000005ab : 44883800;  % 1986: 	mtc1 $t0, $f7	    #take number to c1 %
000005ac : 468039e0;  % 1987: 	cvt.s.w $f7, $f7    #convert to floating point %
000005ad : 46033ac3;  % 1988: 	div.s $f11, $f7, $f3 #a part of fractionary number %
000005ae : 460b0840;  % 1989: 	add.s $f1, $f1, $f11 %
000005af : 22730001;  % 1991: 	addi $s3, $s3, 1	# soma 1 ao #s3, contador de caracteres da parte fracionaria %
000005b0 : 22310001;  % 1992: 	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
000005b1 : 0800059d;  % 1994: 	j loop2			# volta para loop2 %
000005b2 : 22310001;  % 1996: stepE1: addi $s1, $s1, 1 %
000005b3 : 0011c821;  % 1998: 	move $t9, $s1 %
000005b4 : 001fc021;  % 1999: 	move $t8, $ra %
000005b5 : 0c00061e;  % 2000: 	jal loadbytet0 %
000005b6 : 0018f821;  % 2001: 	move $ra, $t8		# $t0 = elemento atual da pilha %
000005b7 : 2001002b;  % 2002: 	beq $t0, '+', stepE2 %
000005b8 : 10280003;  % 2002:  %
000005b9 : 2001002d;  % 2003: 	bne $t0, '-', stepEE	# '-' = 45 Se for negativo prossegue, se nï¿½o ir para loop1 %
000005ba : 14280002;  % 2003:  %
000005bb : 24120001;  % 2004: 	li $s2, 1		# $s2 sinalizado 1 como negativo %
000005bc : 22310001;  % 2006: stepE2:	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
000005bd : 0011b821;  % 2010: stepEE:	move $s7, $s1 %
000005be : 0017c821;  % 2011: stepE3:	move $t9, $s7 %
000005bf : 001fc021;  % 2012: 	move $t8, $ra %
000005c0 : 0c00061e;  % 2013: 	jal loadbytet0 %
000005c1 : 0018f821;  % 2014: 	move $ra, $t8		# le o numero da pilha %
000005c2 : 20010000;  % 2015: 	beq $t0, 0, stepE4	#'\0' = 0 quando elemento atual da pilha for 0 pule para loop1 %
000005c3 : 10280007;  % 2015:  %
000005c4 : 2001002e;  % 2016: 	beq $t0, 46, stepE4	# '.' = 46 quanto elemento atual da pilha for . ou seja acabou os numeros inteiros va para loop1 %
000005c5 : 10280005;  % 2016:  %
000005c6 : 2001000a;  % 2017: 	beq $t0, 10, stepE4	# \n %
000005c7 : 10280003;  % 2017:  %
000005c8 : 2108ffd0;  % 2018: 	addi $t0, $t0, -48	# subtrai-se 48 para encontrar o numero inteiro de 0 a 9 segundo a tabela ascii %
000005c9 : 26f70001;  % 2019: 	addiu $s7, $s7, 1 %
000005ca : 080005be;  % 2020: 	j stepE3 %
000005cb : 02f14022;  % 2022: stepE4:	sub $t0, $s7, $s1 #numero total de casas decimais depois de E %
000005cc : 2108ffff;  % 2023: 	addi $t0, $t0, -1 %
000005cd : 4488f000;  % 2024: 	mtc1 $t0, $f30 %
000005ce : 00087821;  % 2025: 	move $t7, $t0 %
000005cf : 0012a821;  % 2026: 	move $s5, $s2 %
000005d0 : 24120000;  % 2027: 	li $s2, 0 #estava tendo problema com s2... %
000005d1 : 001fc021;  % 2028: 	move $t8, $ra %
000005d2 : 0c0005fe;  % 2029: 	jal n10 # 10**n is salved in f31 after this %
000005d3 : 0018f821;  % 2030: 	move $ra, $t8 %
000005d4 : 00159021;  % 2031: 	move $s2, $s5 #retorna s2 ao valor original %
000005d5 : 4600f946;  % 2032: 	mov.s $f5, $f31 %
000005d6 : 3c014120;  % 2035: li $t0, 0x41200000 %
000005d7 : 34280000;  % 2035:  %
000005d8 : 44882800;  % 2036: mtc1 $t0, $f5 %
000005d9 : 0011c821;  % 2037: stepE5:	move $t9, $s1 %
000005da : 001fc021;  % 2038: 	move $t8, $ra %
000005db : 0c00061e;  % 2039: 	jal loadbytet0 %
000005dc : 0018f821;  % 2040: 	move $ra, $t8	# le o numero da pilha %
000005dd : 20010000;  % 2041: 	beq $t0, 0, final	#'\0' = 0 quando elemento atual da pilha for 0 pule para end1p1 %
000005de : 1028000a;  % 2041:  %
000005df : 2001000a;  % 2042: 	beq $t0, 10, final	# '\n' %
000005e0 : 10280008;  % 2042:  %
000005e1 : 2108ffd0;  % 2043: 	addi $t0, $t0, -48	# subtrai-se 48 para encontrar o numero inteiro de 0 a 9 segundo a tabela ascii %
000005e2 : 44883800;  % 2045: 	mtc1 $t0, $f7		#passes read number from stack to c1 %
000005e3 : 468039e0;  % 2046: 	cvt.s.w $f7, $f7	#converts it to floating point number %
000005e4 : 460728c2;  % 2047: 	mul.s $f3, $f5, $f7 	#contains 10**n * (char) %
000005e5 : 46022943;  % 2048: 	div.s $f5, $f5, $f2 	#makes 10**(n-1) %
000005e6 : 46036b40;  % 2049: 	add.s $f13, $f13, $f3 	#adding, adding... %
000005e7 : 22310001;  % 2051: 	addi $s1, $s1, 1	# avanca o ponteiro da pilha %
000005e8 : 080005d9;  % 2053: 	j stepE5			# pula para loop1 %
000005e9 : 44945000;  % 2055: final:  mtc1 $s4, $f10 #s4 is signal, then f10 will be signal %
000005ea : 468052a0;  % 2056: 	cvt.s.w $f10, $f10 %
000005eb : 1680000c;  % 2057: 	bnez $s4, sign	#change signal if s4 != 0 %
000005ec : 44927000;  % 2059: go_on1: mtc1 $s2, $f14 #s2 is signal of exponent, then f10 will be signal %
000005ed : 468073a0;  % 2060: 	cvt.s.w $f14, $f14 %
000005ee : 1640000e;  % 2061: 	bnez $s2, signE	#change signal if s4 != 0 %
000005ef : 46006b64;  % 2063: go_on2:	cvt.w.s $f13, $f13 %
000005f0 : 440f6800;  % 2064: 	mfc1 $t7, $f13 %
000005f1 : 46006b64;  % 2065: 	cvt.w.s $f13, $f13 %
000005f2 : 001fc021;  % 2066: 	move $t8, $ra %
000005f3 : 0c0005fe;  % 2067: 	jal n10 %
000005f4 : 0018f821;  % 2068: 	move $ra, $t8 %
000005f5 : 461f0842;  % 2069: 	mul.s $f1, $f1, $f31 %
000005f6 : 46000806;  % 2072: print:	mov.s $f0, $f1 #mov.s $f12, $f1 %
000005f7 : 080001a7;  % 2075: 	j backReadFloat %
000005f8 : 3c01bf80;  % 2081: sign:	li $t0, 0xBF800000 #-1 %
000005f9 : 34280000;  % 2081:  %
000005fa : 44885000;  % 2082: 	mtc1 $t0, $f10 %
000005fb : 460a0842;  % 2083: 	mul.s $f1, $f1, $f10 %
000005fc : 080005ec;  % 2084: 	j go_on1 %
000005fd : 080005ef;  % 2086: signE:	j go_on2 #isso nao e mais necessario... so volte %
000005fe : 23bdffec;  % 2092: n10:	addi $sp,$sp,-20  #Argumento esta em t7 = n, saida em 10**n = $f31#Argumento esta em t7 = n, saida em 10**n = $f31 %
000005ff : afbf0000;  % 2093: 	sw $ra,0($sp) %
00000600 : afa80004;  % 2094: 	sw $t0,4($sp) %
00000601 : afaf0008;  % 2095: 	sw $t7,8($sp) %
00000602 : e7a0000c;  % 2096: 	swc1 $f0,12($sp) %
00000603 : e7af0010;  % 2097: 	swc1 $f15,16($sp) %
00000604 : 3c014120;  % 2099: 	li $t0, 0x41200000 #10 %
00000605 : 34280000;  % 2099:  %
00000606 : 44880000;  % 2100: 	mtc1 $t0, $f0 %
00000607 : 3c013f80;  % 2101: 	li $t0, 0x3F800000 #1 %
00000608 : 34280000;  % 2101:  %
00000609 : 4488f800;  % 2102: 	mtc1 $t0, $f31 %
0000060a : 16400004;  % 2103: 	bnez $s2, multiply_neg %
0000060b : 11e0000b;  % 2105: multiply_pos: 	beqz $t7, END2 #a0 e o valor de n, vai subtraindo ate chegar em 0 ai vai para fim %
0000060c : 4600ffc2;  % 2106: 	mul.s $f31, $f31, $f0 %
0000060d : 21efffff;  % 2107: 	addi $t7, $t7, -1 %
0000060e : 0800060b;  % 2108: 	j multiply_pos %
0000060f : 11e00003;  % 2110: multiply_neg:	beqz $t7, invert #a0 e o valor de n, vai subtraindo ate chegar em 0 ai vai para fim %
00000610 : 4600ffc2;  % 2111: 	mul.s $f31, $f31, $f0 %
00000611 : 21efffff;  % 2112: 	addi $t7, $t7, -1 %
00000612 : 0800060f;  % 2113: 	j multiply_neg %
00000613 : 3c013f80;  % 2115: invert: li $t0, 0x3F800000 #1 %
00000614 : 34280000;  % 2115:  %
00000615 : 44887800;  % 2116: 	mtc1 $t0, $f15 %
00000616 : 461f7fc3;  % 2118: 	div.s $f31, $f15, $f31 # 1 / 10 ** n %
00000617 : 8fbf0000;  % 2120: END2: 	lw $ra,0($sp) %
00000618 : 8fa80004;  % 2121: 	lw $t0,4($sp) %
00000619 : 8faf0008;  % 2122: 	lw $t7,8($sp) %
0000061a : c7a0000c;  % 2123: 	lwc1 $f0,12($sp) %
0000061b : c7af0010;  % 2124: 	lwc1 $f15,16($sp) %
0000061c : 23bd0014;  % 2125: 	addi $sp, $sp, 20 %
0000061d : 03e00008;  % 2126: 	jr $ra %
0000061e : 23bdfff8;  % 2132: loadbytet0: addi $sp, $sp, -8 %
0000061f : afab0000;  % 2133: sw $11, 0($sp) %
00000620 : afac0004;  % 2134: sw $12, 4($sp) %
00000621 : 240b0004;  % 2137: li $11, 4 %
00000622 : 032b001a;  % 2138: div $t9, $11 %
00000623 : 00005810;  % 2139: mfhi $11 %
00000624 : 032b4022;  % 2140: sub $t0, $t9, $11 #este endereco em a0 agora esta alinhado %
00000625 : 8d080000;  % 2141: lw $t0, 0($t0) %
00000626 : 240c0000;  % 2142: li $12, 0 %
00000627 : 118b000f;  % 2143: beq $12, $11, lb3  %
00000628 : 240c0001;  % 2144: li $12, 1 %
00000629 : 118b000a;  % 2145: beq $12, $11, lb2  %
0000062a : 240c0002;  % 2146: li $12, 2 %
0000062b : 118b0005;  % 2147: beq $12, $11, lb1 %
0000062c : 240c0003;  % 2148: li $12, 3 %
0000062d : 118b0000;  % 2149: beq $12, $11, lb0 %
0000062e : 00084602;  % 2152: lb0:	srl $t0, $t0, 24 %
0000062f : 310800ff;  % 2153: 	andi $t0, 0xFF %
00000630 : 08000639;  % 2154: 	j endlb %
00000631 : 00084402;  % 2155: lb1:	srl $t0, $t0, 16 %
00000632 : 310800ff;  % 2156: 	andi $t0, 0xFF %
00000633 : 08000639;  % 2157: 	j endlb %
00000634 : 00084202;  % 2158: lb2:	srl $t0, $t0, 8 %
00000635 : 310800ff;  % 2159: 	andi $t0, 0xFF %
00000636 : 08000639;  % 2160: 	j endlb %
00000637 : 310800ff;  % 2161: lb3:	andi $t0, 0xFF %
00000638 : 08000639;  % 2162: 	j endlb %
00000639 : 8fab0000;  % 2163: endlb:	lw $11, 0($sp) %
0000063a : 8fac0004;  % 2164: lw $12, 4($sp) %
0000063b : 23bd0008;  % 2165: addi $sp, $sp, 8 %
0000063c : 03e00008;  % 2166: jr $ra %

END;
